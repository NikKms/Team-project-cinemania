{"mappings":"iiBAIAA,EAAA,SCJA,I,EAAAC,EAAAD,EAAA,S,uCAKME,G,EAAkBC,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,I,IAGhBC,EACEC,EAGFC,EACAC,E,mFALY,EAAAC,EAAAC,YADN,UACsB,G,cAA5BL,EAAGM,EAAAC,KACHN,EAAcD,EAAZC,Q,SAGYO,I,cAAdN,EAAKI,EAAAC,KACLJ,EAAeF,EAAQQ,KAC3B,SAAAC,G,IACEC,EAAED,EAAFC,GACAC,EAAKF,EAALE,MAEAC,EAAWH,EAAXG,YACAC,EAAYJ,EAAZI,aACAC,EAASL,EAATK,UACAC,EAAYN,EAAZM,aAEA,MAAO,CACLL,GAAIA,EACJC,MAAOA,EAEPK,OAAQJ,EACRK,OAAQJ,EACRK,OAAQC,EAAelB,EAAOa,GAC9BM,KAAMC,EAAgBN,G,sBAIrBb,G,wFAGHK,EAAU,W,MAAGZ,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,I,IACTwB,EAGAJ,E,kFAHeK,EAAAC,QAAMC,IAC3B,yDAAiEC,OApCrD,qC,cAmCRJ,EAAMjB,EAAAC,KAAJgB,KAGFJ,EAAaI,EAAXJ,O,kBACDA,G,6FALO,GAQVC,EAAiB,SAAClB,EAAOa,GAC7B,IAAMI,EAAS,GAMf,OALAjB,EAAMO,KAAI,SAAAC,G,IAAGC,EAAED,EAAFC,GAAIiB,EAAIlB,EAAJkB,MACe,IAA1Bb,EAAUc,QAAQlB,IACpBQ,EAAOW,KAAKF,E,IAGTT,EAAOY,KAAK,I,EAGfT,EAAkB,SAAAU,GAGtB,OAFa,IAAIC,KAAKD,GACJE,a,EAIpBvC,IAAkBwC,MAAK,SAAAnC,G,OAAOoC,QAAQC,IAAIrC,E","sources":["src/catalog.js","src/partials/js/catalog/example.js"],"sourcesContent":["// import { Roboto400, Roboto500, Roboto700 } from './partials/js/fonts';\n// import '@fontsource/roboto/400.css';\n// import '@fontsource/roboto/500.css';\n// import '@fontsource/roboto/700.css';\nimport './partials/js/hero/hero';\nimport './partials/js/catalog/example';\n","import axios from 'axios';\nimport { getByQuery, getMovie } from '../api';\n\nconst API_KEY = '88b8a7c5d221d3120fb29d734050dc7d';\n\nconst createDataCards = async () => {\n  //////////////////////////////////////////\n  const str = 'ghosted';\n  const res = await getByQuery(str, 1);\n  const { results } = res;\n  //////////////////////////////////////////\n\n  const genre = await fetchGenre();\n  const newCardsDate = results.map(\n    ({\n      id,\n      title,\n      //original_language,\n      poster_path,\n      vote_average,\n      genre_ids,\n      release_date,\n    }) => {\n      return {\n        id: id,\n        title: title,\n        //language: original_language,\n        poster: poster_path,\n        rating: vote_average,\n        genres: createGenreStr(genre, genre_ids),\n        date: createMovieDate(release_date),\n      };\n    }\n  );\n  return newCardsDate;\n};\n\nconst fetchGenre = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const { genres } = data;\n  return genres;\n};\n\nconst createGenreStr = (genre, genre_ids) => {\n  const genres = [];\n  genre.map(({ id, name }) => {\n    if (genre_ids.indexOf(id) !== -1) {\n      genres.push(name);\n    }\n  });\n  return genres.join(',');\n};\n\nconst createMovieDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  return year;\n};\n\ncreateDataCards().then(res => console.log(res));\n\nexport { createDataCards };\n"],"names":["parcelRequire","$bpxeT","$bfa640fc158a0d39$export$f3fd225445632348","$parcel$interopDefault","$2TvXO","mark","_callee","res","results","genre","newCardsDate","$jyO6b","getByQuery","_ctx","sent","$bfa640fc158a0d39$var$fetchGenre","map","param","id","title","poster_path","vote_average","genre_ids","release_date","poster","rating","genres","$bfa640fc158a0d39$var$createGenreStr","date","$bfa640fc158a0d39$var$createMovieDate","data","$dIxxU","default","get","concat","name","indexOf","push","join","dateString","Date","getFullYear","then","console","log"],"version":3,"file":"catalog.ae221ada.js.map"}