{"mappings":"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","sources":["src/partials/js/home/example-home.js","src/partials/js/home/home-refs.js","src/partials/js/home/home-markups.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending, getUpcoming, getGenre } from '../api';\nimport { renderUpcomingFilm, renderWeeklyThreeTrends } from './home-markups';\nimport { homeRefs } from './home-refs';\n\nconst { seeAll, upcomingWrapEl } = homeRefs;\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.insertAdjacentHTML(\n      'beforeend',\n      '<p class=\"upcoming-not-found\">OOPS...<br>We are very sorry!<br>We donâ€™t have any results</p>'\n    );\n  }\n}\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else {\n    return 'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n\nexport { getGenresById, filterGenres, getImagePath };\n","const homeRefs = {\n  listOfFilms: document.querySelector('.weekly-cards-wrap'),\n  upcomingWrapEl: document.querySelector('.upcoming_wrap'),\n  seeAll: document.querySelector('.weekly-title-link'),\n};\n\nexport { homeRefs };\n","import { homeRefs } from './home-refs';\nimport { addFilmToStorage } from '../my-lib/lib-storage';\nimport { getGenresById, getImagePath, filterGenres } from './example-home';\n\nconst { upcomingWrapEl, listOfFilms } = homeRefs;\nlet addToLibBtn = null;\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n  <div class=\"weekly-card-description\">\n    <h3 class=\"weekly-card-description-title\">${title || name}</h3>\n    <div class='weekly-card-description-wrap'>\n       <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n\n     <div class=\"Stars\" style=\"--rating: ${parseFloat(\n       (vote_average / 2).toFixed(1)\n     )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div>\n      </div>\n  </div>\n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" id=\"add-to-lib\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n\n  addToLibBtn = document.getElementById('add-to-lib');\n\n  const addToLib = evt => {\n    addFilmToStorage(upcomingFilm);\n  };\n  addToLibBtn.addEventListener('click', addToLib);\n}\n\nexport { renderUpcomingFilm, renderWeeklyThreeTrends };\n"],"names":["$bpxeT","parcelRequire","$71a98155ab1593ef$export$7a981fe2d045e8d1","listOfFilms","document","querySelector","upcomingWrapEl","seeAll","$6e53298b68645335$var$upcomingWrapEl","$6e53298b68645335$var$listOfFilms","$6e53298b68645335$var$addToLibBtn","$6e53298b68645335$export$7094d6a2a4c209af","firstThreeFilms","$6e53298b68645335$var$_renderWeeklyThreeTrends","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee1","markup","Promise","all","map","_callee","param","title","release_date","genre_ids","id","poster_path","name","first_air_date","vote_average","listGenres","backdrop_path","$ef95d285b54824a0$export$d1804f076a27e43a","$ef95d285b54824a0$export$f32c0af4ea6694a5","_ctx","sent","concat","substring","parseFloat","toFixed","_ctx1","innerHTML","join","$6e53298b68645335$export$c6dec097ddaf1822","upcomingFilm","$6e53298b68645335$var$_renderUpcomingFilm","popularity","vote_count","overview","isMobile","imagePath","addToLib","window","innerWidth","$ef95d285b54824a0$export$5a2382fd1ece6122","insertAdjacentHTML","getElementById","evt","$kaqNk","addFilmToStorage","addEventListener","$ef95d285b54824a0$var$upcomingWrapEl","$ef95d285b54824a0$var$_getWeeklyTrends","data","$jyO6b","getWeeklyTrending","$ef95d285b54824a0$var$getFirstThreeElements","results","array","slice","ids","$ef95d285b54824a0$var$_getGenresById","genres","arrGenres","getGenre","genre1","find","genre","$ef95d285b54824a0$var$_getUpcomingFilm","ref","formattedStartDate","formattedEndDate","$ef95d285b54824a0$var$getCurrentEndLastDayOfMonth","getUpcoming","$ef95d285b54824a0$var$getRandomValue","backdropPath","posterPath","length","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","Math","floor","random","location","href"],"version":3,"file":"index.acaac481.js.map"}