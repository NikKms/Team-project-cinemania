{"mappings":"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","sources":["src/partials/js/home/example-home.js","src/partials/js/home/home-refs.js","src/partials/js/home/home-markups.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending, getUpcoming, getGenre } from '../api';\nimport { renderUpcomingFilm, renderWeeklyThreeTrends } from './home-markups';\nimport { homeRefs } from './home-refs';\n\nconst { seeAll, upcomingWrapEl } = homeRefs;\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.insertAdjacentHTML(\n      'beforeend',\n      '<p class=\"upcoming-not-found\">OOPS...<br>We are very sorry!<br>We donâ€™t have any results</p>'\n    );\n  }\n}\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else {\n    return 'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n\nexport { getGenresById, filterGenres, getImagePath };\n","const homeRefs = {\n  listOfFilms: document.querySelector('.weekly-cards-wrap'),\n  upcomingWrapEl: document.querySelector('.upcoming_wrap'),\n  seeAll: document.querySelector('.weekly-title-link'),\n};\n\nexport { homeRefs };\n","import { homeRefs } from './home-refs';\nimport { getGenresById, getImagePath, filterGenres } from './example-home';\nimport { handleFilmInStorage } from '../my-lib/lib-storage';\n\nconst { upcomingWrapEl, listOfFilms } = homeRefs;\nlet addToLibBtnHome = null;\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img loading=\"lazy\"\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n  <div class=\"weekly-card-description\">\n    <h3 class=\"weekly-card-description-title\">${title || name}</h3>\n    <div class='weekly-card-description-wrap'>\n       <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n\n     <div class=\"Stars\" style=\"--rating: ${parseFloat(\n       (vote_average / 2).toFixed(1)\n     )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div>\n      </div>\n  </div>\n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    id,\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" id=\"add-to-lib\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n\n  addToLibBtnHome = document.getElementById('add-to-lib');\n\n  const isFilmInLocalStorage = id => {\n    const films = JSON.parse(localStorage.getItem('films')) || [];\n\n    const filmExists = films.some(film => film.id === id);\n    if (filmExists) {\n      addToLibBtnHome.textContent = 'Remove from the library';\n    }\n  };\n\n  isFilmInLocalStorage(id);\n\n  const addToLib = evt => {\n    handleFilmInStorage(upcomingFilm);\n    let currentUrl = window.location.href;\n    if (currentUrl.includes('my-lib-page.html')) {\n      window.location.reload();\n    }\n  };\n\n  addToLibBtnHome.addEventListener('click', addToLib);\n}\n\nexport { renderUpcomingFilm, renderWeeklyThreeTrends, addToLibBtnHome };\n"],"names":["parcelRequire","$f920f05938cb3dd0$export$7a981fe2d045e8d1","listOfFilms","document","querySelector","upcomingWrapEl","seeAll","$b037c2ff0b46dfa3$var$upcomingWrapEl","$b037c2ff0b46dfa3$var$listOfFilms","$b037c2ff0b46dfa3$export$8c8587b143c2519b","async","$b037c2ff0b46dfa3$export$7094d6a2a4c209af","firstThreeFilms","markup","Promise","all","map","backdrop_path","title","release_date","genre_ids","id","poster_path","name","first_air_date","vote_average","$756bd49929fd9e28$export$d1804f076a27e43a","$756bd49929fd9e28$export$f32c0af4ea6694a5","substring","parseFloat","toFixed","innerHTML","join","$b037c2ff0b46dfa3$export$c6dec097ddaf1822","upcomingFilm","id1","popularity","vote_count","overview","listGenres","$756bd49929fd9e28$export$5a2382fd1ece6122","window","innerWidth","insertAdjacentHTML","getElementById","JSON","parse","localStorage","getItem","some","film","textContent","addEventListener","evt","$cl7Eh","handleFilmInStorage","location","href","includes","reload","$756bd49929fd9e28$var$seeAll","$756bd49929fd9e28$var$upcomingWrapEl","ids","genres","$19F3f","getGenre","genre1","find","genre","backdropPath","posterPath","isMobile","length","slice","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","array","randomIndex","Math","floor","random","$756bd49929fd9e28$var$getRandomValue","results","error","getWeeklyTrending"],"version":3,"file":"index.7f61fbe6.js.map"}