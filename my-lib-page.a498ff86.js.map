{"mappings":"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","sources":["src/partials/js/my-lib/lib-main.js","src/partials/js/my-lib/lib-markups.js","src/partials/js/my-lib/loadMoreBtn.js"],"sourcesContent":["import { getGenre } from '../api';\nimport { parsedFilms, parsedFilmsGenreIds, clearLibrary } from './lib-storage';\nimport {\n  renderLibMoviesListMarkup,\n  renderLibSelectMarkup,\n} from './lib-markups';\nimport { libRefs } from './lib-refs';\nimport { LoadMoreBtn } from './loadMoreBtn';\n\nconst { libSelectEl, libMoviesListEl, libLoadMoreBtn, libClearBtn } = libRefs;\n\nconst loadMore = new LoadMoreBtn({\n  btnEl: libLoadMoreBtn,\n});\n\nlet selectedGenre = '1';\nconst movieByStep = 9;\nlet totalMoviesLoaded = 0;\n\nconst getFilteredGenres = async movieGenresIds => {\n  const { genres } = await getGenre();\n\n  return genres.filter(({ id }) => movieGenresIds.includes(id));\n};\n\nconst renderFilteredGenres = async moviesArr => {\n  const filteredGenres = await getFilteredGenres(moviesArr);\n  renderLibSelectMarkup(filteredGenres);\n};\n\nconst loadMovies = moviesArr => {\n  const slicedArr = moviesArr.slice(\n    totalMoviesLoaded,\n    totalMoviesLoaded + movieByStep\n  );\n\n  totalMoviesLoaded += movieByStep;\n  renderLibMoviesListMarkup(slicedArr);\n};\n\nconst onLibSelectChange = () => {\n  selectedGenre = libSelectEl.value;\n  totalMoviesLoaded = 0;\n  clearHTML();\n  loadMoviesByGenre(selectedGenre);\n};\n\nconst loadMoviesByGenre = selectedValue => {\n  filterMoviesListByGenre(selectedValue);\n};\n\nconst filterMoviesListByGenre = selectedValue => {\n  if (selectedValue === '1') {\n    loadMovies(parsedFilms);\n    checkArrLength(parsedFilms);\n  } else {\n    const filteredMovies = parsedFilms.filter(movie =>\n      movie.genres.some(genre => genre.id === parseInt(selectedValue))\n    );\n    loadMovies(filteredMovies);\n    checkArrLength(filteredMovies);\n  }\n};\n\nconst checkArrLength = moviesArr => {\n  if (moviesArr.length <= totalMoviesLoaded) {\n    loadMore.hideBtn();\n  } else {\n    loadMore.showBtn();\n  }\n};\n\nconst onLoadBtnClick = () => {\n  loadMore.disableBtn();\n  loadMoviesByGenre(selectedGenre);\n  loadMore.enableBtn();\n};\n\nconst clearHTML = () => {\n  libMoviesListEl.innerHTML = '';\n};\n\nconst onClearBtnClick = () => {\n  clearLibrary();\n};\n\nlibSelectEl.addEventListener('change', onLibSelectChange);\n\nwindow.addEventListener('load', () => {\n  renderFilteredGenres(parsedFilmsGenreIds);\n  loadMovies(parsedFilms);\n  checkArrLength(parsedFilms);\n});\n\nlibLoadMoreBtn.addEventListener('click', onLoadBtnClick);\nconst onClick = evt => {\n  console.log(evt.target);\n};\n\nlibMoviesListEl.addEventListener('click', onClick);\n\nlibClearBtn.addEventListener('click', onClearBtnClick);\n\nexport { getGenreName };\n","import { libRefs } from './lib-refs';\n\nconst { libSelectEl, libMoviesListEl } = libRefs;\n\nconst createLibSelectMarkup = genre => {\n  return `<option value=\"${genre.id}\">${genre.name}</option>`;\n};\n\nconst createLibMoviesListMarkup = ({\n  title,\n  name,\n  release_date,\n  first_air_date,\n  genres,\n  poster_path,\n  vote_average,\n  id,\n}) => {\n  const genreNames = genres.map(genre => genre.name).slice(0, 2);\n\n  const movieTitle = title || name;\n  const movieReleaseYear = release_date || first_air_date;\n  return ` <li class=\"mylibrary_movie \">\n  <div class=\"mylibrary_poster\">\n  <img src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${movieTitle}\" />\n      <div class=\"mylibrary_move_dark is-id\" data-id=${id}></div>\n  </div>\n  <h3 class=\"mylibrary_movies_name\">${movieTitle}</h3>\n  <p class=\"mylibrary_genre_movie\">${genreNames.join(\n    ' '\n  )} | ${movieReleaseYear.substring(0, 4)}</p>\n  <div class=\"hero-star-raiting\" >\n      <span>\n          <div class=\"Stars\" style=\"--rating: ${\n            vote_average / 2\n          }; \" aria-label=\"Rating of this product is ${(\n    vote_average / 2\n  ).toFixed(1)} out of 5.\">\n      </span>\n  </div>\n</li>`;\n};\n\nconst renderLibSelectMarkup = genresArr => {\n  const libSelectMarkupEls = genresArr.map(genre =>\n    createLibSelectMarkup(genre)\n  );\n  libSelectEl.insertAdjacentHTML('beforeend', libSelectMarkupEls.join(' '));\n};\n\nconst renderLibMoviesListMarkup = movies => {\n  const libMovieListMarkup = movies.map(movie =>\n    createLibMoviesListMarkup(movie)\n  );\n  libMoviesListEl.insertAdjacentHTML('beforeend', libMovieListMarkup.join(' '));\n};\n\nexport { renderLibMoviesListMarkup, renderLibSelectMarkup };\n","class LoadMoreBtn {\n  static classes = {\n    hidden: 'lib-btn-hidden',\n  };\n\n  constructor({ btnEl, isHidden = false }) {\n    this.button = btnEl;\n    isHidden && this.hideBtn();\n  }\n\n  getBtn(selector) {\n    return document.querySelector(selector);\n  }\n\n  hideBtn() {\n    this.button.classList.add(LoadMoreBtn.classes.hidden);\n  }\n\n  showBtn() {\n    this.button.classList.remove(LoadMoreBtn.classes.hidden);\n  }\n\n  disableBtn() {\n    this.button.disabled = true;\n    this.button.textContent = 'Loading...';\n  }\n\n  enableBtn() {\n    this.button.disabled = false;\n    this.button.textContent = 'Load more';\n  }\n}\n\nexport { LoadMoreBtn };\n"],"names":["$bpxeT","parcelRequire","$693fde924ddead04$var$libSelectEl","$5KpiF","libRefs","libSelectEl","$693fde924ddead04$var$libMoviesListEl","libMoviesListEl","$8MBJY","$91bfe49cf4d88e3f$export$fa7cf5edad276a21","LoadMoreBtn","param","btnEl","_isHidden","isHidden","this","button","hideBtn","key","selector","document","querySelector","classList","add","classes","hidden","remove","disabled","textContent","$parcel$interopDefault","$hKHmD","$e984e962385f4ee6$var$libSelectEl","$e984e962385f4ee6$var$libMoviesListEl","$e984e962385f4ee6$var$libLoadMoreBtn","libLoadMoreBtn","$e984e962385f4ee6$var$libClearBtn","libClearBtn","$e984e962385f4ee6$var$loadMore","$e984e962385f4ee6$var$selectedGenre","$e984e962385f4ee6$var$totalMoviesLoaded","$e984e962385f4ee6$var$getFilteredGenres","$2TvXO","mark","_callee","movieGenresIds","genres","$jyO6b","getGenre","_ctx","sent","filter","id","includes","$e984e962385f4ee6$var$renderFilteredGenres","moviesArr","filteredGenres","libSelectMarkupEls","map","genre","concat","name","$693fde924ddead04$var$createLibSelectMarkup","insertAdjacentHTML","join","$e984e962385f4ee6$var$loadMovies","libMovieListMarkup","slicedArr","slice","movie","title","release_date","first_air_date","poster_path","vote_average","genreNames","movieTitle","movieReleaseYear","substring","toFixed","$e984e962385f4ee6$var$loadMoviesByGenre","selectedValue","$e984e962385f4ee6$var$filterMoviesListByGenre","$kaqNk","parsedFilms","$e984e962385f4ee6$var$checkArrLength","filteredMovies","some","parseInt","length","showBtn","$e984e962385f4ee6$var$clearHTML","innerHTML","addEventListener","value","window","parsedFilmsGenreIds","disableBtn","enableBtn","evt","console","log","target","clearLibrary"],"version":3,"file":"my-lib-page.a498ff86.js.map"}