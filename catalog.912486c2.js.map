{"mappings":"+eAAA,IAAAA,EAAAC,EAAA,S,aCAA,MAAMC,EAAO,CACXC,WAAYC,SAASC,eAAe,cAEpCC,aAAcF,SAASG,cAAc,mBCD1BC,EAAcC,IACzB,MAAMC,EAASD,EACZE,KAAIC,GACI,gBAAgBA,EAAKC,gFACmBD,EAAKE,gBAAgBF,EAAKG,sIAI9DH,EAAKG,4FAGFH,EAAKI,iEACwBJ,EAAKK,kHAKzBL,EAAKM,uHAM7BC,KAAK,IAMV,IAAiBC,IALPV,EAMRR,EAAKI,aAAae,UAAYD,EAL9BE,QAAQC,IAAIb,EAAO,EFtBrB,MACMc,EAAapB,SAASG,cAAc,gBASpCkB,EAAmBC,MAAMC,IAC7B,MAAMC,QAAEA,SAAkB,EAAAC,EAAAC,YAAWH,EAAY,GACjDI,EAAgBH,GAASI,MAAKC,GAAOX,QAAQC,IAAIU,IAAK,EAGlDF,EAAkBL,MAAMQ,IAC5BZ,QAAQC,IAAIW,GACZ,MAAMC,QAAcC,IACdC,EAAeH,EAAWvB,KAC9B,EAACE,GAAEA,EAAEE,MAAEA,EAAKuB,YAAEA,EAAWC,aAAEA,EAAYC,UAAEA,EAASC,aAAEA,MAC3C,CACL5B,GAAIA,EACJE,MAAOA,EACPD,OAAQwB,EACRpB,OAAQqB,EACRvB,OAAQ0B,EAAeP,EAAOK,GAC9BvB,KAAM0B,EAAgBF,OAI5BjC,EAAY6B,EAAa,EAGrBD,EAAaV,UACjB,MAAMkB,KAAEA,SAAe5C,EAAA6C,QAAMC,IAC3B,2FAEI9B,OAAEA,GAAW4B,EACnB,OAAO5B,CAAM,EAGT0B,EAAiB,CAACP,EAAOK,KAC7B,MAAMxB,EAAS,GAMf,OALAmB,EAAMxB,KAAI,EAACE,GAAEA,EAAEkC,KAAEA,OACe,IAA1BP,EAAUQ,QAAQnC,IACpBG,EAAOiC,KAAKF,EAAK,IAGd/B,EAAOG,KAAK,IAAI,EAGnBwB,EAAkBO,GACT,IAAIC,KAAKD,GACJE,cAIpB5B,EAAW6B,iBAAiB,UAtDNC,IACpBA,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SAASH,EAAEI,SAC1BC,aAAEA,GAAiBC,OAAOC,YAAYL,EAASM,WACrDrC,EAAiBkC,EAAa,I","sources":["src/partials/js/catalog/example.js","src/partials/js/refs.js","src/partials/js/catalog/createCards.js"],"sourcesContent":["import axios from 'axios';\nimport { getByQuery, getMovie } from '../api';\nimport { refs } from '../refs';\nimport { createCards } from './createCards';\n\nconst API_KEY = '88b8a7c5d221d3120fb29d734050dc7d';\nconst searchForm = document.querySelector('.search-form');\n\nconst submitHandler = e => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const { searchMovies } = Object.fromEntries(formData.entries());\n  getMoviesByQuery(searchMovies);\n};\n\nconst getMoviesByQuery = async searchTerm => {\n  const { results } = await getByQuery(searchTerm, 1);\n  createDataCards(results).then(res => console.log(res));\n};\n\nconst createDataCards = async moviesData => {\n  console.log(moviesData);\n  const genre = await fetchGenre();\n  const newCardsDate = moviesData.map(\n    ({ id, title, poster_path, vote_average, genre_ids, release_date }) => {\n      return {\n        id: id,\n        title: title,\n        poster: poster_path,\n        rating: vote_average,\n        genres: createGenreStr(genre, genre_ids),\n        date: createMovieDate(release_date),\n      };\n    }\n  );\n  createCards(newCardsDate);\n};\n\nconst fetchGenre = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const { genres } = data;\n  return genres;\n};\n\nconst createGenreStr = (genre, genre_ids) => {\n  const genres = [];\n  genre.map(({ id, name }) => {\n    if (genre_ids.indexOf(id) !== -1) {\n      genres.push(name);\n    }\n  });\n  return genres.join(',');\n};\n\nconst createMovieDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  return year;\n};\n\nsearchForm.addEventListener('submit', submitHandler);\n\nexport { createDataCards };\n","const refs = {\n  pagination: document.getElementById('pagination'),\n  //_______Catalog_______\n  catalogFilms: document.querySelector('.catalog-films'),\n  //____________________\n};\n\nexport { refs };\n","import { refs } from '../refs';\n\nexport const createCards = dataCard => {\n  const markup = dataCard\n    .map(card => {\n      return `<div data-id=${card.id} class=\"catalog-card\">\n      <img src='https://image.tmdb.org/t/p/original${card.poster}' alt=\"${card.title}\" loading=\"lazy\" />\n      <div class=\"catalog-info\">\n        <div>\n          <p class=\"catalog-info-name\">\n            <b>${card.title}</b>\n          </p>\n          <p class=\"catalog-info-details\">\n            <span>${card.genres}</span>\n            <span class=\"catalog-info-border\" >${card.date}</span>\n          </p>\n        </div>\n        <div\n          class=\"Stars\"\n          style=\"--rating: ${card.rating}\"\n          aria-label=\"Rating of this product is 2.3 out of 5.\"\n        ></div>\n      </div>\n    </div>`;\n    })\n    .join('');\n  addHTML(markup);\n  console.log(markup);\n  //   dataCard.map(el => console.log(el));\n};\n\nfunction addHTML(cards) {\n  refs.catalogFilms.innerHTML = cards;\n}\n"],"names":["$2shzp","parcelRequire","$97b4d273c2f21ef2$export$21666b427502ea6d","pagination","document","getElementById","catalogFilms","querySelector","$900f3e5968da7b57$export$659b6b545718ce73","dataCard","markup","map","card","id","poster","title","genres","date","rating","join","cards","innerHTML","console","log","$e5c465ec961d44e9$var$searchForm","$e5c465ec961d44e9$var$getMoviesByQuery","async","searchTerm","results","$19F3f","getByQuery","$e5c465ec961d44e9$export$f3fd225445632348","then","res","moviesData","genre","$e5c465ec961d44e9$var$fetchGenre","newCardsDate","poster_path","vote_average","genre_ids","release_date","$e5c465ec961d44e9$var$createGenreStr","$e5c465ec961d44e9$var$createMovieDate","data","default","get","name","indexOf","push","dateString","Date","getFullYear","addEventListener","e","preventDefault","formData","FormData","target","searchMovies","Object","fromEntries","entries"],"version":3,"file":"catalog.912486c2.js.map"}