{"mappings":"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","sources":["src/partials/js/home/example-home.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending } from '../api';\nimport { getUpcoming } from '../api';\nimport { getGenre } from '../api';\nimport { addFilmToStorage } from '../my-lib/lib-storage';\n\nconst listOfFilms = document.querySelector('.weekly-cards-wrap');\nconst upcomingWrapEl = document.querySelector('.upcoming_wrap');\nconst seeAll = document.querySelector('.weekly-title-link');\nlet addToLibBtn = null;\n\n// ================See all=================\n\n// seeAll.addEventListener('click', () => {\n//   location.href = 'catalog.html';\n// });\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  console.log(firstThreeFilms);\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n  <div class=\"weekly-card-description\">\n    <h3 class=\"weekly-card-description-title\">${title || name}</h3>\n    <div class='weekly-card-description-wrap'>\n       <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n\n     <div class=\"Stars\" style=\"--rating: ${parseFloat(\n       (vote_average / 2).toFixed(1)\n     )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div>\n      </div>\n  </div>\n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.insertAdjacentHTML(\n      'beforeend',\n      '<p class=\"upcoming-not-found\">OOPS...We are very sorry! We don’t have any results</p>'\n    );\n  }\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n  console.log('upcomingFilm: ', upcomingFilm);\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" id=\"add-to-lib\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n\n  addToLibBtn = document.getElementById('add-to-lib');\n\n  const addToLib = evt => {\n    addFilmToStorage(upcomingFilm);\n  };\n  addToLibBtn.addEventListener('click', addToLib);\n}\n\n// Функція для визначення шляху зображення на основі ширини екрану\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else {\n    return 'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\n// =========== function getRandomValue =============\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n\nexport { getGenresById, filterGenres };\n"],"names":["parcelRequire","$756bd49929fd9e28$var$listOfFilms","document","querySelector","$756bd49929fd9e28$var$upcomingWrapEl","$756bd49929fd9e28$var$addToLibBtn","async","$756bd49929fd9e28$export$f32c0af4ea6694a5","ids","genres","$19F3f","getGenre","map","id","genre1","find","genre","name","join","$756bd49929fd9e28$export$d1804f076a27e43a","genre_ids","length","slice","window","addEventListener","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","upcomingFilm","backdrop_path","poster_path","popularity","release_date","title","vote_average","vote_count","overview","console","log","listGenres","isMobile","innerWidth","markup","backdropPath","posterPath","$756bd49929fd9e28$var$getImagePath","toFixed","insertAdjacentHTML","getElementById","addToLib","evt","$cl7Eh","addFilmToStorage","$756bd49929fd9e28$var$renderUpcomingFilm","array","randomIndex","Math","floor","random","$756bd49929fd9e28$var$getRandomValue","results","error","firstThreeFilms","Promise","all","first_air_date","substring","parseFloat","innerHTML","$756bd49929fd9e28$var$renderWeeklyThreeTrends","getWeeklyTrending"],"version":3,"file":"index.e50c640d.js.map"}