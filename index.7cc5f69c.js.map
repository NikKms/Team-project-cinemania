{"mappings":"+eAAAA,EAAA,S,yCAKA,MAAMC,EAAcC,SAASC,cAAc,sBACrCC,EAAiBF,SAASC,cAAc,kBA8F9CE,eAAeC,EAAcC,GAC3B,MACMC,SADa,EAAAC,EAAAC,aACCF,OAMpB,OAJkBD,EAAII,KAAIC,IACxB,MAAMC,EAAQL,EAAOM,MAAKC,GAASA,EAAMH,KAAOA,IAChD,OAAOC,EAAQA,EAAMG,KAAO,EAAE,IAEfC,KAAK,K,CArGTf,SAASC,cAAc,sBAI/Be,iBAAiB,SAAS,KAC/BC,SAASC,KAAO,cAAc,IAuMhCC,OAAOH,iBAAiB,oBAlGxBb,iBACE,MAAMiB,mBAAEA,EAAkBC,iBAAEA,GAyE9B,WACE,MAAMC,EAAc,IAAIC,KAClBC,EAAcF,EAAYG,cAC1BC,EAAeC,OAAOL,EAAYM,WAAa,GAAGC,SAAS,EAAG,KAC9DC,EAAaH,OAAOL,EAAYS,WAAWF,SAAS,EAAG,KAEvDT,EAAqB,GAAGI,KAAeE,KAAgBI,IAEvDE,EAAoB,IAAIT,KAAKC,EAAaE,EAAc,GACxDO,EAAiB,IAAIV,KAAKS,EAAoB,GAAGD,UACjDG,EAA0BP,OAAOM,GAAgBJ,SAAS,EAAG,KAInE,MAAO,C,mBAAET,E,iBAFgB,GAAGI,KAAeE,KAAgBQ,I,CApFzDC,GACF,IACE,MAAMC,QAAa,EAAA7B,EAAA8B,aAAYjB,EAAoBC,IAQvDlB,eAAkCmC,GAChC,MAAMC,cACJA,EAAaC,UACbA,EAASC,WACTA,EAAUC,aACVA,EAAYC,MACZA,EAAKC,aACLA,EAAYC,WACZA,EAAUC,SACVA,GACER,EAEES,QAAmB3C,EAAcoC,GAEjCQ,EAAS,sHAEqET,4GAGxCI,sQAKaD,0PAMjCE,oBAA+BC,kVAQKJ,EAAWQ,QACvD,wNAMuCF,gLAOPD,gKAOhD5C,EAAegD,mBAAmB,YAAaF,E,CAjE7CG,CAuFJ,SAAwBC,GACtB,MAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,QACrD,OAAOL,EAAMC,E,CA1FSK,CAAetB,EAAKuB,S,CAExC,MAAOC,GACPC,QAAQC,IAAIF,EAAMG,Q,KA2FtB5C,OAAOH,iBAAiB,oBAnMxBb,iBACE,MAEM6D,SAFa,EAAAzD,EAAA0D,sBAEgCN,QAMtCO,MAAM,EAAG,GALtBL,QAAQC,IAAIE,GAQd7D,eAAuC6D,GACrCH,QAAQC,IAAIE,GACZ,MAAMhB,QAAemB,QAAQC,IAC3BJ,EAAgBvD,KACdN,OAAOoC,cACLA,EAAaI,MACbA,EAAKD,aACLA,EAAYF,UACZA,EAAS9B,GACTA,EAAE2D,YACFA,EAAWvD,KACXA,EAAIwD,eACJA,EAAc1B,aACdA,KAIO,uLAIuCyB,qFAGR3D,6JAKhCiC,GAAS7B,yEAdUV,EAAcoC,QAiBrCE,EACIA,EAAa6B,UAAU,EAAG,GAC1BD,EAAeC,UAAU,EAAG,0EAGKC,YACnC5B,EAAe,GAAGK,QAAQ,+GA8BpClD,EAAY0E,UAAYzB,EAAOjC,KAAK,G,CA3EpC2D,CAAwBV,E","sources":["src/partials/js/home/example-home.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending } from '../api';\nimport { getUpcoming } from '../api';\nimport { getGenre } from '../api';\n\nconst listOfFilms = document.querySelector('.weekly-cards-wrap');\nconst upcomingWrapLi = document.querySelector('.upcoming_wrap');\nconst seeAll = document.querySelector('.weekly-title-link');\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  console.log(firstThreeFilms);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  console.log(firstThreeFilms);\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card\" >\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay is-id\" data-id=${id}></div>       \n        </div>\n        <div class=\"weekly-card-description\">\n          <div>\n            <title class=\"weekly-card-description-title\">${\n              title || name\n            }</title>\n            <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n          </div>\n         <div class=\"Stars\" style=\"--rating: ${parseFloat(\n           (vote_average / 2).toFixed(1)\n         )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div> \n        </div>\n        \n      </li>`;\n      }\n\n      //   return `<li class=\"weekly-card\" >\n      //   <div class=\"weekly-container-image\">\n      //     <img\n      //       class=\"weekly-card-image\"\n      //      src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n      //       alt=\"\"\n      //     />\n      //    <div class=\"overlay is-id\" data-id=${id}></div>\n      //   </div>\n      //   <div class=\"weekly-card-description\">\n      //     <span class=\"weekly-card-description-title\">${title || name}</span>\n      //     <span class=\"weekly-card-description-other\">${listGenres} | ${\n      //     release_date\n      //       ? release_date.substring(0, 4)\n      //       : first_air_date.substring(0, 4)\n      //   }</span>\n      //   </div>\n      //   <div class=\"weekly-card-raiting\">Stars5*</div>\n      // </li>`;\n      // }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  const {\n    backdrop_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n\n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapLi.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0'); // Додаємо 1, оскільки номер місяця починається з 0\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\n// =========== function getRandomValue =============\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n"],"names":["parcelRequire","$756bd49929fd9e28$var$listOfFilms","document","querySelector","$756bd49929fd9e28$var$upcomingWrapLi","async","$756bd49929fd9e28$var$getGenresById","ids","genres","$19F3f","getGenre","map","id","genre1","find","genre","name","join","addEventListener","location","href","window","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","upcomingFilm","backdrop_path","genre_ids","popularity","release_date","title","vote_average","vote_count","overview","listGenres","markup","toFixed","insertAdjacentHTML","$756bd49929fd9e28$var$renderUpcomingFilm","array","randomIndex","Math","floor","random","length","$756bd49929fd9e28$var$getRandomValue","results","error","console","log","message","firstThreeFilms","getWeeklyTrending","slice","Promise","all","poster_path","first_air_date","substring","parseFloat","innerHTML","$756bd49929fd9e28$var$renderWeeklyThreeTrends"],"version":3,"file":"index.7cc5f69c.js.map"}