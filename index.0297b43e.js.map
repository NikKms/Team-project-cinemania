{"mappings":"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","sources":["src/partials/js/modal.js","src/partials/js/home/example-home.js"],"sourcesContent":["import { getInfoByMovie } from './api';\nimport { getGenre } from './api';\n\nconst refs = {\n  openModal: document.querySelector('[data-modal-open]'),\n  closeModal: document.querySelector('[data-modal-close]'),\n  backdrop: document.querySelector('[data-modal]'),\n  upcomingWrapLi: document.querySelector('.upcoming_modal'),\n};\n\nrefs.openModal.addEventListener('click', onOpenModal);\nrefs.closeModal.addEventListener('click', onCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\nfunction onOpenModal(event) {\n  console.log(event.target);\n  if (event.target.classList.contains('is-id')) {\n    const cardId = event.target.dataset.id;\n    getMovieById(cardId);\n  }\n\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.remove('is-hidden');\n}\n\nfunction onCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.add('is-hidden');\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onCloseModal();\n  }\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') onCloseModal();\n}\n\nasync function getMovieById(id) {\n  const data = await getInfoByMovie(id);\n  renderFilmInModal(data);\n}\n\nfunction renderFilmInModal(film) {\n  console.log(film);\n  const {\n    poster_path,\n    backdrop_path,\n    genres,\n    overview,\n    popularity,\n    title,\n    vote_average,\n    vote_count,\n  } = film;\n  const genresList = genres.map(genre => genre.name);\n  const formatedGenres = genresList.join(', ');\n\n  const imagePath =\n    poster_path !== null\n      ? `https://image.tmdb.org/t/p/original/${poster_path}`\n      : `https://image.tmdb.org/t/p/original/${backdrop_path}`;\n\n  const markup = `\n    <div class=\"modal-card\">\n      <img\n        class=\"modal-img\"\n        src=\"https://image.tmdb.org/t/p/original/${imagePath}\"\n        alt=\" \"\n      />\n\n      <div class=\"modal-card-wrap\">\n        <h3 class=\"modal-card-title\">${title}</h3>\n\n          <div class=\"modal-card-vote-wrap\">\n            <div class=\"modal-card-vote\"><span>Vote / Votes</span></div>\n            <div class=\"modal-card-vote-data\">\n              <span>${vote_average}</span> / <span>${vote_count}</span>\n            </div>\n          </div>\n        \n          <div class=\"modal-card-popularity-wrap\">\n            <span class=\"modal-card-popularity-text\">Popularity</span>\n            <span class=\"modal-card-popularity-data\"\n              >${popularity.toFixed(1)}</span\n            >\n          </div>\n\n          <div class=\"modal-card-genre-wrap\">\n            <span class=\"modal-card-genre-text\">Genre</span>\n            <span class=\"modal-card-genre-data\">${formatedGenres}</span>\n          </div>\n        \n        <span class=\"modal-card-about-title\">About</span>\n\n        <p class=\"modal-card-about-text\">${overview}</p>\n\n        <button class=\"modal-button\" type=\"button\">Add to my library</button>\n      </div>\n    </div>`;\n\n  refs.upcomingWrapLi.innerHTML = markup;\n}\n","import * as hero from '../../js/modal';\nimport { getWeeklyTrending } from '../api';\nimport { getUpcoming } from '../api';\nimport { getGenre } from '../api';\n\nconst listOfFilms = document.querySelector('.weekly-cards-wrap');\nconst upcomingWrapLi = document.querySelector('.upcoming_wrap');\nconst seeAll = document.querySelector('.weekly-title-link');\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  console.log(firstThreeFilms);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  console.log(firstThreeFilms);\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card\" >\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay is-id\" data-id=${id}></div>       \n        </div>\n        <ul class=\"weekly-card-description\">\n        <li><span class=\"weekly-card-description-title\">${title || name}</span>\n          <span class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</span>\n        </li>\n         <li class=\"Stars\" style=\"--rating: ${parseFloat(\n           (vote_average / 2).toFixed(1)\n         )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></li> \n        </ul>\n        \n      </li>`;\n      }\n\n      //   return `<li class=\"weekly-card\" >\n      //   <div class=\"weekly-container-image\">\n      //     <img\n      //       class=\"weekly-card-image\"\n      //      src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n      //       alt=\"\"\n      //     />\n      //    <div class=\"overlay is-id\" data-id=${id}></div>\n      //   </div>\n      //   <div class=\"weekly-card-description\">\n      //     <span class=\"weekly-card-description-title\">${title || name}</span>\n      //     <span class=\"weekly-card-description-other\">${listGenres} | ${\n      //     release_date\n      //       ? release_date.substring(0, 4)\n      //       : first_air_date.substring(0, 4)\n      //   }</span>\n      //   </div>\n      //   <div class=\"weekly-card-raiting\">Stars5*</div>\n      // </li>`;\n      // }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  const {\n    backdrop_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n\n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapLi.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0'); // Додаємо 1, оскільки номер місяця починається з 0\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\n// =========== function getRandomValue =============\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n"],"names":["$19F3f","parcelRequire","$51a648048b126082$var$refs","openModal","document","querySelector","closeModal","backdrop","upcomingWrapLi","$51a648048b126082$var$onCloseModal","window","removeEventListener","$51a648048b126082$var$onEscKeyPress","classList","add","event","code","addEventListener","console","log","target","contains","async","id","film","poster_path","backdrop_path","genres","overview","popularity","title","vote_average","vote_count","formatedGenres","map","genre","name","join","markup","toFixed","innerHTML","$51a648048b126082$var$renderFilmInModal","getInfoByMovie","$51a648048b126082$var$getMovieById","dataset","remove","currentTarget","$756bd49929fd9e28$var$listOfFilms","$756bd49929fd9e28$var$upcomingWrapLi","$756bd49929fd9e28$var$getGenresById","ids","getGenre","genre1","find","location","href","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","upcomingFilm","genre_ids","release_date","listGenres","insertAdjacentHTML","$756bd49929fd9e28$var$renderUpcomingFilm","array","randomIndex","Math","floor","random","length","$756bd49929fd9e28$var$getRandomValue","results","error","message","firstThreeFilms","getWeeklyTrending","slice","Promise","all","first_air_date","substring","parseFloat","$756bd49929fd9e28$var$renderWeeklyThreeTrends"],"version":3,"file":"index.0297b43e.js.map"}