{"mappings":"4iBAAA,IAAAA,EAAAC,EAAA,S,aCAAC,GCAAD,EAAA,S,WDAAA,EAAA,U,0BEAME,EAAO,CACXC,WAAYC,SAASC,eAAe,cAEpCC,aAAcF,SAASG,cAAc,kBACrCC,WAAYJ,SAASG,cAAc,gBACnCE,aAAcL,SAASG,cAAc,iBACrCG,WAAYN,SAASG,cAAc,gBCJxBI,GCFbZ,EAAAC,EAAA,S,aDE2B,SAAAY,GACzB,IA6BeC,EA7BTC,EAASF,EACZG,KAAI,SAAAC,GACH,MAAO,eACwCC,OADzBD,EAAKE,GAAG,gFAE5BD,OAD6CD,EAAKG,OAAO,YAI5BF,OAH7BD,EAAKI,MACN,8FAKaH,OAHiBD,EAAKI,MAAM,sHAI5BH,OADAD,EAAKK,OAAO,+BAKHJ,OAJTD,EAAKM,KAAK,iGAIeL,OAAhBD,EAAKO,OAAS,EAAE,iK,IAQxCC,KAAK,IAMOX,EALPC,EAMRZ,EAAKI,aAAamB,UAAYZ,C,GC9BhC,I,EAAMa,G,EAAkBC,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAMC,G,IACtBC,EACAC,E,kFADcC,I,OAAdF,EAAKG,EAAAC,KACLH,EAAeF,EAAWhB,KAC9B,SAAAsB,G,IAAGnB,EAAEmB,EAAFnB,GAAIE,EAAKiB,EAALjB,MAAOkB,EAAWD,EAAXC,YAAaC,EAAYF,EAAZE,aAAcC,EAASH,EAATG,UAAWC,EAAYJ,EAAZI,aAClD,MAAO,CACLvB,GAAIA,EACJE,MAAOA,EACPD,OAAQmB,EACRf,OAAQgB,EACRlB,OAAQqB,EAAeV,EAAOQ,GAC9BlB,KAAMqB,EAAgBF,G,IAI5B9B,EAAYsB,G,oDAdgBF,G,iCAiBxBW,EAAiB,SAACV,EAAOQ,GAC7B,IAAMnB,EAAS,GAMf,OALAW,EAAMjB,KAAI,SAAAsB,G,IAAGnB,EAAEmB,EAAFnB,GAAI0B,EAAIP,EAAJO,MACe,IAA1BJ,EAAUK,QAAQ3B,IACpBG,EAAOyB,KAAKF,E,IAGTvB,EAAO0B,MAAM,EAAG,GAAGvB,KAAK,K,EAI3BmB,EAAkB,SAAAK,GAGtB,OAFa,IAAIC,KAAKD,GACJE,a,EAIdC,EAAY,SAACC,EAAKC,GACtB,IACE,IAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,E,CAC1B,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,GAIvCC,EAAY,SAAAV,GAChB,IACE,IAAME,EAAkBG,aAAaM,QAAQX,GAC7C,OAA2B,OAApBE,OAA2BU,EAAYT,KAAKU,MAAMX,E,CACzD,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,GJhD9BK,EKHZ,W,sBLGkBC,EACPC,EAAYC,EAAMC,G,wBAO9B3C,EAAA4C,EAAA,CAAAC,KAAA,gBAAe,WACb,GAAIC,EAAKL,YAAc,EACrBK,EAAKC,YADP,CAKAD,EAAKE,mBAAqB,GAE1BF,EAAKG,cAAcH,EAAKE,oBACpBF,EAAKL,WAAa,IACpBK,EAAKI,oBAAoBJ,EAAKE,oBAC9BF,EAAKK,eAAeL,EAAKE,oBACzBF,EAAKI,oBAAoBJ,EAAKE,oBAAoB,GAClDF,EAAKM,YAAYN,EAAKE,qBAGxB,IAAM7D,EAAS2D,EAAKO,iBAAiBP,EAAKE,mBAAmBnD,KAAK,KAClEiD,EAAKQ,OAAOnE,GACZqC,EAAU,cAAesB,EAAKS,aAC9BT,EAAKH,UAAUG,EAAKS,aACpBtB,QAAQuB,IAAIV,EAAKL,W,KAGnBzC,EAAA4C,EAAA,CAAAC,KAAA,iBAAgB,SAAAY,GACd,IAAK,IAAIC,EAAO,EAAGA,GAAQC,KAAKC,IAAI,EAAGd,EAAKL,YAAaiB,IAAQ,CAC/D,IAAMG,EAAWf,EAAKS,cAAgBG,EAAO,aAAe,GACtDI,EAAMhB,EAAKiB,qBAAqBL,EAAMG,GAC5CJ,EAAItC,KAAK2C,E,KAIb9D,EAAA4C,EAAA,CAAAC,KAAA,kBAAiB,SAAAY,GAGf,IAFA,IAAMO,EAAYL,KAAKM,IAAI,EAAGnB,EAAKS,YAAc,GAC3CW,EAAUP,KAAKC,IAAId,EAAKS,YAAc,EAAGT,EAAKL,WAAa,GACxDiB,EAAOM,EAAWN,GAAQQ,EAASR,IAAQ,CAClD,IAAMG,EAAWf,EAAKS,cAAgBG,EAAO,aAAe,GACtDI,EAAMhB,EAAKiB,qBAAqBL,EAAMG,GAC5CJ,EAAItC,KAAK2C,E,KAIb9D,EAAA4C,EAAA,CAAAC,KAAA,uBAAsB,SAACY,G,IAAKU,EAAKC,UAAAC,OAAA,YAAAD,UAAA,IAAAA,UAAA,IAE7BD,GAAUrB,EAAKS,YAAcT,EAAKL,WAAa,IAC7C0B,GAASrB,EAAKS,YAAc,IAE9BE,EAAItC,KAAK,gD,IAIbnB,EAAA4C,EAAA,CAAAC,KAAA,eAAc,SAAAY,GACZ,IAAMa,EAAWxB,EAAKL,WAChBoB,EAAWf,EAAKS,cAAgBe,EAAW,aAAe,GAC1DR,EAAMhB,EAAKiB,qBAAqBO,EAAUT,GAChDJ,EAAItC,KAAK2C,E,IAGX9D,EAAA4C,EAAA,CAAAC,KAAA,wBAAuB,SAAC0B,EAAMC,GAC5B,MAAO,8BAC4BlF,OADEkF,EAAY,6CACkBlF,OAAhCiF,EAAK,6BAAgCjF,OAALiF,EAAK,0B,IAI1EvE,EAAA4C,EAAA,CAAAC,KAAA,oBAAmB,SAAA4B,GAajB,MAZ4B,kCAKxBnF,OAHAwD,EAAKL,YAAc,EAAI,oBAAsB,GAC9C,oFAI+BnD,OAF9BwD,EAAKL,YAAc,EAAI,2BAA6B,GACrD,yDAGGnD,OAF4BmF,EAAgB,wFAG7CnF,OADCwD,EAAKL,YAAc,EAAI,2BAA6B,GACrD,gC,IAKPzC,EAAA4C,EAAA,CAAAC,KAAA,UAAS,SAAArE,GACPsE,EAAKC,QACLxE,EAAKI,aAAa+F,mBAAmB,WAAYlG,GACjD,IAAMmG,EAAKlG,SAASG,cAAc,eAC5BgG,EAAsBnG,SAASG,cAAc,eAEnD+F,EAAGE,iBAAiB,QAAS/B,EAAKgC,YAClCF,EAAoBC,iBAAiB,QAAS/B,EAAKiC,cAEnD,IAAMC,EAAavG,SAASG,cAC1B,4CAEuB,IAArBkE,EAAKS,YACPyB,EAAWC,MAAMC,QAAU,OAE3BF,EAAWC,MAAMC,QAAU,QAG7B,IAAMC,EAAa1G,SAASG,cAC1B,4CAEEkE,EAAKS,cAAgBT,EAAKL,WAC5B0C,EAAWF,MAAMC,QAAU,OAE3BC,EAAWF,MAAMC,QAAU,O,IAI/BlF,EAAA4C,EAAA,CAAAC,KAAA,gBAAe,SAAAuC,GACb,IAAMC,EAAWD,EAAEE,OAEfD,EAASE,UAAUC,SAAS,2BAC9B1C,EAAK2C,OAEHJ,EAASE,UAAUC,SAAS,2BAC9B1C,EAAK4C,M,IAIT1F,EAAA4C,EAAA,CAAAC,KAAA,SAAQ,WACN,IAAM8B,EAAKlG,SAASG,cAAc,eAC9B+F,GAAIA,EAAGgB,Q,IAGb3F,EAAA4C,EAAA,CAAAC,KAAA,QAAO,WACL,GAAyB,IAArBC,EAAKS,YAAT,CACAT,EAAKS,aAAe,EACpBT,EAAK8C,eAEL,IAAMZ,EAAavG,SAASG,cAC1B,4CAEuB,IAArBkE,EAAKS,YACPyB,EAAWC,MAAMC,QAAU,OAE3BF,EAAWC,MAAMC,QAAU,OAVD,C,IAc9BlF,EAAA4C,EAAA,CAAAC,KAAA,QAAO,WACL,GAAIC,EAAKS,cAAgBT,EAAKL,WAA9B,CACAK,EAAKS,aAAe,EACpBT,EAAK8C,eAEL,IAAMT,EAAa1G,SAASG,cAC1B,4CAEEkE,EAAKS,cAAgBT,EAAKL,WAC5B0C,EAAWF,MAAMC,QAAU,OAE3BC,EAAWF,MAAMC,QAAU,OAVa,C,IAmB5ClF,EAAA4C,EAAA,CAAAC,KAAA,cAAa,SAAAuC,GACXA,EAAES,iBACF,IAAMnC,EAAOoC,SAASV,EAAEE,OAAOS,QAAQxB,MAClCyB,MAAMtC,KACTZ,EAAKS,YAAcG,EACnBZ,EAAK8C,e,IAzKP/C,KAAKJ,WAAaA,EAClBI,KAAKU,YAAcb,EACnBG,KAAKF,UAAYA,EACjBE,KAAKG,mBAAqB,E,iBA4J5BvB,IAAA,a,MAAA,SAAW8C,GACT1B,KAAKU,YAAcgB,EACnB1B,KAAK+C,c,OKtKN,G,0BJMGK,EAAU,mCAEHC,EAAgB,W,MAAGlG,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IAAOgG,EAAgBxG,EAG/CyG,EAEiCC,EAA/BC,EAASC,EAAahC,EAAIiC,EAAApC,U,yEALG+B,EAAUK,EAAAnC,OAAA,YAAAmC,EAAA,GAAAA,EAAA,GAAG,EAAG7G,EAAI6G,EAAAnC,OAAA,YAAAmC,EAAA,GAAAA,EAAA,GAAG,EAC5DjI,EAAKO,aAAa2H,UAAW,EAC7BlI,EAAKQ,WAAW0H,UAAW,EACrBL,EAAajE,EAAU,cAC7BF,QAAQuB,IAAI2C,EAAYC,EAAYzG,G,UACS,EAAA+G,EAAAC,YAC3CP,EACAD,EACAxG,G,cAHqC0G,EAItC7F,EAAAC,KAJO6F,EAA+BD,EAA/BC,QAASC,EAAsBF,EAAtBE,YAAahC,EAAS8B,EAAT9B,KAK9BxE,EAAgBuG,G,kBACT,CACLA,UACAC,cACAhC,S,8FAdyB,GAkBhBqC,EAAgB,W,MAAG5G,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAOoD,G,IAAasD,EAI1CC,EAKAR,EAAS/B,EAAMgC,EAAWC,EAAApC,U,yEATgByC,EAAQL,EAAAnC,OAAA,YAAAmC,EAAA,GAAAA,EAAA,GAAG,EAC7DvE,QAAQuB,IAAIqD,GACZtI,EAAKO,aAAa2H,UAAW,EAC7BlI,EAAKQ,WAAW0H,UAAW,E,SACJM,EAAAC,QAAMC,IAC3B,0DAA0E3H,OAAhB2G,EAAQ,UAChE3G,OADwEiE,GAEzEjE,OADCuH,EAAW,gBAAyBvH,OAATuH,GAAa,GACzC,oB,cAHGC,EAAMtG,EAAAC,KAAJqG,KAKAR,EAA+BQ,EAA/BR,QAAS/B,EAAsBuC,EAAtBvC,KAAMgC,EAAgBO,EAAhBP,YACvBxG,EAAgBuG,G,kBACT,CACLA,UACA/B,OACAgC,gB,4DAdmChD,G,gCAAV,GAkBhBhD,EAAU,W,MAAGP,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IAChB2G,EAGApH,E,kFAHeqH,EAAAC,QAAMC,IAC3B,yDAAiE3H,OAAR2G,I,cADrDa,EAAMtG,EAAAC,KAAJqG,KAGFpH,EAAaoH,EAAXpH,O,kBACDA,G,6FALc,GFxCjBwH,EAAazI,SAASG,cAAc,gBACpCuI,EAAe1I,SAASG,cAAc,iBACtCwI,EAAa3I,SAASG,cAAc,eAcpCyI,EAAS,W,MAAGrH,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IACckG,EAAtB9B,EAAMgC,E,kFAAsBK,I,OAANP,EAAwB7F,EAAAC,KAA9C8D,EAAsB8B,EAAtB9B,KAAMgC,EAAgBF,EAAhBE,YACK,IAAIhE,EAAWgE,EAAahC,EAAMqC,GAC1ChB,eACX9D,aAAawF,WAAW,c,6FAJX,GAOTC,EAAc,W,MAAGvH,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAMqH,G,IACGnB,EAAtB9B,EAAMgC,E,kFAAsBL,I,OAANG,EAAwB7F,EAAAC,KAA9C8D,EAAsB8B,EAAtB9B,KAAMgC,EAAgBF,EAAhBE,YACK,IAAIhE,EAAWgE,EAAahC,EAAM2B,GAC1CN,eACXwB,EAAWK,gBAAgB,Y,2DAJAD,G,gCAAT,GAOdE,EAAmB,W,MAAG1H,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IACpBT,EACFiI,E,kFADiBpH,I,OAAfb,EAAMc,EAAAC,MACRkH,EAAajI,EAAON,KAAI,SAAAwI,GAC1B,MAAO,kBAAgCtI,OAAdsI,EAAOrI,GAAG,MAAgBD,OAAZsI,EAAO3G,KAAK,Y,KAE1C4G,QAAS,oCACpBV,EAAarH,UAAY6H,EAAW9H,KAAK,IACzCsH,EAAaM,gBAAgB,Y,6FAPN,GAUnBK,EAAc,W,MAAG9H,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAMiF,G,IACrB1D,EACA6B,EAQI+C,EAKFyB,E,qEAdFrG,EAAQ0D,EAAEE,OAAO5D,MACjB6B,EAAcpB,EAAU,gBACXA,EAAU,cAEf,C,mBACE,QAAVT,EAAe,C,sBACjBwE,EAAiB3C,EAAa,G,0CAGN2C,EAAiB3C,EAAa7B,G,cAAlD4E,EAAS9F,EAAAC,KAAP6F,QACRvG,EAAgBuG,GAChBrE,QAAQuB,IAAI8C,G,4CAGYM,EAAiBrD,EAAa7B,G,QAAlDqG,EAASvH,EAAAC,KAAP6F,QACRrE,QAAQuB,IAAIuE,GACZhI,EAAgBgI,G,4DAjBW3C,G,gCAAT,GAiCd4C,EAAa,W,MAAGhI,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAMiF,G,IACpB1D,EACA6B,EAEwB8C,EAAtBE,E,yEAHF7E,EAAQ0D,EAAEE,OAAO5D,MACjB6B,EAAcpB,EAAU,e,SAEM+D,EAAiB3C,EAAa7B,G,OAApC2E,EAA0C7F,EAAAC,KAAhE8F,EAAsBF,EAAtBE,YAAsBF,EAAT9B,KACF,IAAIhC,EAAWgE,EAAa,EAAGL,GACvCN,e,2DANeR,G,gCAAT,GASnB8B,EAAWrC,iBAAiB,UA9EN,SAAAO,GACpBA,EAAES,iBACF,IAAMoC,EAAW,IAAIC,SAAS9C,EAAEE,QAC1BkC,EAAmBW,OAAOC,YAAYH,EAASI,WAA7Cb,aACHA,EAAanD,QAIlB7C,EAAU,aAAcgG,GACxBD,EAAeC,IAJbH,G,IA0EJiB,OAAOzD,iBAAiB,OAAQwC,GAChCiB,OAAOzD,iBAAiB,OAAQ6C,GAChCY,OAAOzD,iBAAiB,QAzBE,WAMxB,IALA,IAGM0D,EAAW,GAERC,GAJS,IAAIlH,MAAOC,cAILiH,GALR,KAKsBA,IACpCD,EAASpH,KAAK,kBAAwB7B,OAANkJ,EAAE,MAAMlJ,OAAFkJ,EAAE,cAG1CpB,EAAWtH,UAAYyI,EAAS1I,KAAK,G,IAgBvCsH,EAAatC,iBAAiB,SAAUiD,GACxCV,EAAWvC,iBAAiB,SAAUmD,G","sources":["src/partials/js/catalog/example.js","src/partials/js/catalog/pagination.js","src/partials/js/catalog/catalogApi.js","src/partials/js/refs.js","src/partials/js/catalog/createCards.js","src/partials/js/catalog/catalogUtils.js","<<jsx-config-pragma.js>>"],"sourcesContent":["import { fetchGenre, getMoviesByQuery, showNewestMovies } from './catalogApi';\nimport { createDataCards, loadLocal, saveLocal } from './catalogUtils';\nimport Pagination from './pagination';\n\nconst searchForm = document.querySelector('.search-form');\nconst selectGenres = document.querySelector('#selectGenres');\nconst selectDate = document.querySelector('#selectDate');\n\nconst submitHandler = e => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const { searchMovies } = Object.fromEntries(formData.entries());\n  if (!searchMovies.length) {\n    afterLoad();\n    return;\n  }\n  saveLocal('searchTerm', searchMovies);\n  afterSearching(searchMovies);\n};\n\nconst afterLoad = async () => {\n  const { page, total_pages } = await showNewestMovies();\n  const pagination = new Pagination(total_pages, page, showNewestMovies);\n  pagination.createButton();\n  localStorage.removeItem('searchTerm');\n};\n\nconst afterSearching = async searchMovies => {\n  const { page, total_pages } = await getMoviesByQuery();\n  const pagination = new Pagination(total_pages, page, getMoviesByQuery);\n  pagination.createButton();\n  selectDate.removeAttribute('disabled');\n};\n\nconst filterSelectOptions = async () => {\n  const genres = await fetchGenre();\n  let arrOptions = genres.map(option => {\n    return `<option value=\"${option.id}\">${option.name}</option>`;\n  });\n  arrOptions.unshift(`<option value='all'>All</option>`);\n  selectGenres.innerHTML = arrOptions.join('');\n  selectGenres.removeAttribute('disabled');\n};\n\nconst setGenreFilter = async e => {\n  const value = e.target.value;\n  const currentPage = loadLocal('currentPage');\n  const searchTerm = loadLocal('searchTerm');\n\n  if (searchTerm) {\n    if (value === 'all') {\n      getMoviesByQuery(currentPage, 0);\n      return;\n    }\n    const { results } = await getMoviesByQuery(currentPage, value);\n    createDataCards(results);\n    console.log(results);\n    return;\n  }\n  const { results } = await showNewestMovies(currentPage, value);\n  console.log(results);\n  createDataCards(results);\n};\n\nconst dateSelectOptions = () => {\n  const endDate = 1970;\n  const startDate = new Date().getFullYear();\n\n  const yearList = [];\n\n  for (let i = startDate; i >= endDate; i--) {\n    yearList.push(`<option value=\"${i}\">${i}</option>`);\n  }\n\n  selectDate.innerHTML = yearList.join('');\n};\n\nconst setDateFilter = async e => {\n  const value = e.target.value;\n  const currentPage = loadLocal('currentPage');\n\n  const { total_pages, page } = await getMoviesByQuery(currentPage, value);\n  const pagination = new Pagination(total_pages, 1, getMoviesByQuery);\n  pagination.createButton();\n};\n\nsearchForm.addEventListener('submit', submitHandler);\nwindow.addEventListener('load', afterLoad);\nwindow.addEventListener('load', filterSelectOptions);\nwindow.addEventListener('load', dateSelectOptions);\nselectGenres.addEventListener('change', setGenreFilter);\nselectDate.addEventListener('change', setDateFilter);\n\nexport { createDataCards };\n","import { refs } from '../refs';\nimport { saveLocal } from './catalogUtils';\n\nexport default class Pagination {\n  constructor(totalPages, page, getMovies) {\n    this.totalPages = totalPages;\n    this.currentPage = page;\n    this.getMovies = getMovies;\n    this.arrPaginationItems = [];\n  }\n\n  createButton = () => {\n    if (this.totalPages <= 1) {\n      this.reset();\n      return;\n    }\n\n    this.arrPaginationItems = [];\n\n    this.addFirstPages(this.arrPaginationItems);\n    if (this.totalPages > 6) {\n      this.addEllipsisIfNeeded(this.arrPaginationItems);\n      this.addMiddlePages(this.arrPaginationItems);\n      this.addEllipsisIfNeeded(this.arrPaginationItems, true);\n      this.addLastPage(this.arrPaginationItems);\n    }\n\n    const markup = this.createPagination(this.arrPaginationItems.join(''));\n    this.render(markup);\n    saveLocal('currentPage', this.currentPage);\n    this.getMovies(this.currentPage);\n    console.log(this.totalPages);\n  };\n\n  addFirstPages = arr => {\n    for (let page = 1; page <= Math.min(3, this.totalPages); page++) {\n      const activeEl = this.currentPage === page ? 'btn-active' : '';\n      const btn = this.createPaginationItem(page, activeEl);\n      arr.push(btn);\n    }\n  };\n\n  addMiddlePages = arr => {\n    const startPage = Math.max(4, this.currentPage - 2);\n    const endPage = Math.min(this.currentPage + 1, this.totalPages - 1);\n    for (let page = startPage; page <= endPage; page++) {\n      const activeEl = this.currentPage === page ? 'btn-active' : '';\n      const btn = this.createPaginationItem(page, activeEl);\n      arr.push(btn);\n    }\n  };\n\n  addEllipsisIfNeeded = (arr, atEnd = false) => {\n    if (\n      (atEnd && this.currentPage < this.totalPages - 2) ||\n      (!atEnd && this.currentPage > 3)\n    ) {\n      arr.push('<li class=\"pagination-item ellipsis\">...</li>');\n    }\n  };\n\n  addLastPage = arr => {\n    const lastPage = this.totalPages;\n    const activeEl = this.currentPage === lastPage ? 'btn-active' : '';\n    const btn = this.createPaginationItem(lastPage, activeEl);\n    arr.push(btn);\n  };\n\n  createPaginationItem = (page, activeClass) => {\n    return `<li class='pagination-item ${activeClass}'>\n              <a href='#' data-page='${page}' class='pagination-btn'>${page}</a>\n            </li>`;\n  };\n\n  createPagination = paginationItems => {\n    const paginationContainer = `\n      <div class='pagination ${\n        this.totalPages <= 1 ? 'pagination-hidden' : ''\n      }'>\n      <button type=\"button\" class='pagination-arrow pagination-arrows-prev${\n        this.totalPages <= 1 ? 'pagination-arrows-hidden' : ''\n      }'>prev</button>\n        <ul class='pagination-list'>${paginationItems}</ul>\n        <button type=\"button\" class='pagination-arrow pagination-arrows-next${\n          this.totalPages <= 1 ? 'pagination-arrows-hidden' : ''\n        }'>next</button>\n      </div>`;\n    return paginationContainer;\n  };\n\n  render = pagination => {\n    this.reset();\n    refs.catalogFilms.insertAdjacentHTML('afterend', pagination);\n    const el = document.querySelector('.pagination');\n    const paginationContainer = document.querySelector('.pagination');\n\n    el.addEventListener('click', this.handlerBtn);\n    paginationContainer.addEventListener('click', this.arrowHandler);\n\n    const prevButton = document.querySelector(\n      '.pagination-arrow.pagination-arrows-prev'\n    );\n    if (this.currentPage === 1) {\n      prevButton.style.display = 'none';\n    } else {\n      prevButton.style.display = 'block';\n    }\n\n    const nextButton = document.querySelector(\n      '.pagination-arrow.pagination-arrows-next'\n    );\n    if (this.currentPage === this.totalPages) {\n      nextButton.style.display = 'none';\n    } else {\n      nextButton.style.display = 'block';\n    }\n  };\n\n  arrowHandler = e => {\n    const targetEl = e.target;\n\n    if (targetEl.classList.contains('pagination-arrows-prev')) {\n      this.prev();\n    }\n    if (targetEl.classList.contains('pagination-arrows-next')) {\n      this.next();\n    }\n  };\n\n  reset = () => {\n    const el = document.querySelector('.pagination');\n    if (el) el.remove();\n  };\n\n  prev = () => {\n    if (this.currentPage === 1) return;\n    this.currentPage -= 1;\n    this.createButton();\n\n    const prevButton = document.querySelector(\n      '.pagination-arrow.pagination-arrows-prev'\n    );\n    if (this.currentPage === 1) {\n      prevButton.style.display = 'none';\n    } else {\n      prevButton.style.display = 'block';\n    }\n  };\n\n  next = () => {\n    if (this.currentPage === this.totalPages) return;\n    this.currentPage += 1;\n    this.createButton();\n\n    const nextButton = document.querySelector(\n      '.pagination-arrow.pagination-arrows-next'\n    );\n    if (this.currentPage === this.totalPages) {\n      nextButton.style.display = 'none';\n    } else {\n      nextButton.style.display = 'block';\n    }\n  };\n\n  updatePage(page) {\n    this.currentPage = page;\n    this.createButton();\n  }\n\n  handlerBtn = e => {\n    e.preventDefault();\n    const page = parseInt(e.target.dataset.page);\n    if (!isNaN(page)) {\n      this.currentPage = page;\n      this.createButton();\n    }\n  };\n}\n","import Pagination from './pagination';\nimport { getByQuery } from '../api';\nimport { createDataCards, loadLocal } from './catalogUtils';\nimport axios from 'axios';\nimport { refs } from '../refs';\n\nconst API_KEY = '88b8a7c5d221d3120fb29d734050dc7d';\n\nexport const getMoviesByQuery = async (chosenPage = 1, date = 0) => {\n  refs.selectGenres.disabled = true;\n  refs.selectDate.disabled = false;\n  const searchTerm = loadLocal('searchTerm');\n  console.log(chosenPage, searchTerm, date);\n  const { results, total_pages, page } = await getByQuery(\n    searchTerm,\n    chosenPage,\n    date\n  );\n  createDataCards(results);\n  return {\n    results,\n    total_pages,\n    page,\n  };\n};\n\nexport const showNewestMovies = async (currentPage, genre_id = 0) => {\n  console.log(genre_id);\n  refs.selectGenres.disabled = false;\n  refs.selectDate.disabled = true;\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}&page=${currentPage}${\n      genre_id ? `&with_genres=${genre_id}` : ''\n    }&language=en-US`\n  );\n  const { results, page, total_pages } = data;\n  createDataCards(results);\n  return {\n    results,\n    page,\n    total_pages,\n  };\n};\n\nexport const fetchGenre = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const { genres } = data;\n  return genres;\n};\n","const refs = {\n  pagination: document.getElementById('pagination'),\n  //_______Catalog_______\n  catalogFilms: document.querySelector('.catalog-films'),\n  searchForm: document.querySelector('.search-form'),\n  selectGenres: document.querySelector('#selectGenres'),\n  selectDate: document.querySelector('#selectDate'),\n  //____________________\n};\n\nexport { refs };\n","import { refs } from '../refs';\n\nexport const createCards = dataCard => {\n  const markup = dataCard\n    .map(card => {\n      return `<li data-id=${card.id} class=\"catalog-card\">\n      <img src='https://image.tmdb.org/t/p/original${card.poster}' alt=\"${\n        card.title\n      }\" loading=\"lazy\" />\n      <div class=\"catalog-info\">\n      <p class=\"catalog-info-name\">${card.title}</p>\n        <div class=\"catalog-info-container\">\n          <p class=\"catalog-info-details\">\n            <span>${card.genres}</span>\n            <span>${card.date}</span>\n          </p>\n          <div\n          class=\"Stars\"\n          style=\"--rating: ${card.rating / 2}\"\n          aria-label=\"Rating of this product is 2.3 out of 5.\"\n        ></div>\n        </div>\n      </div>\n      <div class=\"overlay\"></div>\n    </li>`;\n    })\n    .join('');\n  addHTML(markup);\n  //console.log(markup);\n  //   dataCard.map(el => console.log(el));\n};\n\nfunction addHTML(cards) {\n  refs.catalogFilms.innerHTML = cards;\n}\n","import { fetchGenre } from './catalogApi';\nimport { createCards } from './createCards';\n\nconst createDataCards = async moviesData => {\n  const genre = await fetchGenre();\n  const newCardsDate = moviesData.map(\n    ({ id, title, poster_path, vote_average, genre_ids, release_date }) => {\n      return {\n        id: id,\n        title: title,\n        poster: poster_path,\n        rating: vote_average,\n        genres: createGenreStr(genre, genre_ids),\n        date: createMovieDate(release_date),\n      };\n    }\n  );\n  createCards(newCardsDate);\n};\n\nconst createGenreStr = (genre, genre_ids) => {\n  const genres = [];\n  genre.map(({ id, name }) => {\n    if (genre_ids.indexOf(id) !== -1) {\n      genres.push(name);\n    }\n  });\n  return genres.slice(0, 2).join(', ');\n  //return genres.join('');\n};\n\nconst createMovieDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  return year;\n};\n\nconst saveLocal = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst loadLocal = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nexport {\n  createDataCards,\n  createGenreStr,\n  createMovieDate,\n  saveLocal,\n  loadLocal,\n};\n",null],"names":["$bpxeT","parcelRequire","$8MBJY","$5f0c02a003d98366$export$21666b427502ea6d","pagination","document","getElementById","catalogFilms","querySelector","searchForm","selectGenres","selectDate","$66edc2a1388134fa$export$659b6b545718ce73","dataCard","cards","markup","map","card","concat","id","poster","title","genres","date","rating","join","innerHTML","$1fe4b2be6ef53714$export$f3fd225445632348","$parcel$interopDefault","$2TvXO","mark","_callee","moviesData","genre","newCardsDate","$fe622946adcb22aa$export$13a873f6c4b5d516","_ctx","sent","param","poster_path","vote_average","genre_ids","release_date","$1fe4b2be6ef53714$export$44f0485a2f926b66","$1fe4b2be6ef53714$export$e57ec8acbf34a811","name","indexOf","push","slice","dateString","Date","getFullYear","$1fe4b2be6ef53714$export$b38f1b11c5e38f18","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","$1fe4b2be6ef53714$export$9f183916f445c495","getItem","undefined","parse","$eca5539537a6497d$export$2e2bcd8739ae039","Pagination","totalPages","page1","getMovies","$hKHmD","this","_this","reset","arrPaginationItems","addFirstPages","addEllipsisIfNeeded","addMiddlePages","addLastPage","createPagination","render","currentPage","log","arr","_$page","Math","min","activeEl","btn","createPaginationItem","startPage","max","endPage","atEnd","arguments","length","lastPage","page","activeClass","paginationItems","insertAdjacentHTML","el","paginationContainer","addEventListener","handlerBtn","arrowHandler","prevButton","style","display","nextButton","e","targetEl","target","classList","contains","prev","next","remove","createButton","preventDefault","parseInt","dataset","isNaN","$fe622946adcb22aa$var$API_KEY","$fe622946adcb22aa$export$4a3145eab4db56d2","chosenPage","searchTerm","ref","results","total_pages","_args","disabled","$jyO6b","getByQuery","$fe622946adcb22aa$export$49f9e704d857526c","genre_id","data","$dIxxU","default","get","$bfa640fc158a0d39$var$searchForm","$bfa640fc158a0d39$var$selectGenres","$bfa640fc158a0d39$var$selectDate","$bfa640fc158a0d39$var$afterLoad","removeItem","$bfa640fc158a0d39$var$afterSearching","searchMovies","removeAttribute","$bfa640fc158a0d39$var$filterSelectOptions","arrOptions","option","unshift","$bfa640fc158a0d39$var$setGenreFilter","results1","$bfa640fc158a0d39$var$setDateFilter","formData","FormData","Object","fromEntries","entries","window","yearList","i"],"version":3,"file":"catalog.64a6bc49.js.map"}