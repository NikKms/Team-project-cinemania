{"mappings":"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","sources":["src/partials/js/home/example-home.js","src/partials/js/home/home-refs.js","src/partials/js/home/home-markups.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending, getUpcoming, getGenre } from '../api';\nimport { renderUpcomingFilm, renderWeeklyThreeTrends } from './home-markups';\nimport { homeRefs } from './home-refs';\n\nconst { seeAll, upcomingWrapEl } = homeRefs;\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.insertAdjacentHTML(\n      'beforeend',\n      '<p class=\"upcoming-not-found\">OOPS...<br>We are very sorry!<br>We donâ€™t have any results</p>'\n    );\n  }\n}\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else {\n    return 'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n\nexport { getGenresById, filterGenres, getImagePath };\n","const homeRefs = {\n  listOfFilms: document.querySelector('.weekly-cards-wrap'),\n  upcomingWrapEl: document.querySelector('.upcoming_wrap'),\n  seeAll: document.querySelector('.weekly-title-link'),\n};\n\nexport { homeRefs };\n","import { homeRefs } from './home-refs';\nimport { getGenresById, getImagePath, filterGenres } from './example-home';\nimport { handleFilmInStorage } from '../my-lib/lib-storage';\n\nconst { upcomingWrapEl, listOfFilms } = homeRefs;\nlet addToLibBtnHome = null;\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n  <div class=\"weekly-card-description\">\n    <h3 class=\"weekly-card-description-title\">${title || name}</h3>\n    <div class='weekly-card-description-wrap'>\n       <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n\n     <div class=\"Stars\" style=\"--rating: ${parseFloat(\n       (vote_average / 2).toFixed(1)\n     )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div>\n      </div>\n  </div>\n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    id,\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" id=\"add-to-lib\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n\n  addToLibBtnHome = document.getElementById('add-to-lib');\n\n  const isFilmInLocalStorage = id => {\n    const films = JSON.parse(localStorage.getItem('films')) || [];\n\n    const filmExists = films.some(film => film.id === id);\n    if (filmExists) {\n      addToLibBtnHome.textContent = 'Remove from the library';\n    }\n  };\n\n  isFilmInLocalStorage(id);\n\n  const addToLib = evt => {\n    handleFilmInStorage(upcomingFilm);\n    let currentUrl = window.location.href;\n    if (currentUrl.includes('my-lib-page.html')) {\n      window.location.reload();\n    }\n  };\n\n  addToLibBtnHome.addEventListener('click', addToLib);\n}\n\nexport { renderUpcomingFilm, renderWeeklyThreeTrends, addToLibBtnHome };\n"],"names":["$bpxeT","parcelRequire","$71a98155ab1593ef$export$7a981fe2d045e8d1","listOfFilms","document","querySelector","upcomingWrapEl","seeAll","$6e53298b68645335$var$upcomingWrapEl","$6e53298b68645335$var$listOfFilms","$6e53298b68645335$export$8c8587b143c2519b","$6e53298b68645335$export$7094d6a2a4c209af","firstThreeFilms","$6e53298b68645335$var$_renderWeeklyThreeTrends","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee1","markup","Promise","all","map","_callee","param","title","release_date","genre_ids","id","poster_path","name","first_air_date","vote_average","listGenres","backdrop_path","$ef95d285b54824a0$export$d1804f076a27e43a","$ef95d285b54824a0$export$f32c0af4ea6694a5","_ctx","sent","concat","substring","parseFloat","toFixed","_ctx1","innerHTML","join","$6e53298b68645335$export$c6dec097ddaf1822","upcomingFilm","$6e53298b68645335$var$_renderUpcomingFilm","id1","popularity","vote_count","overview","isMobile","imagePath","addToLib","window","innerWidth","$ef95d285b54824a0$export$5a2382fd1ece6122","insertAdjacentHTML","getElementById","JSON","parse","localStorage","getItem","some","film","textContent","isFilmInLocalStorage","evt","$kaqNk","handleFilmInStorage","location","href","includes","reload","addEventListener","$ef95d285b54824a0$var$upcomingWrapEl","$ef95d285b54824a0$var$_getWeeklyTrends","data","$jyO6b","getWeeklyTrending","$ef95d285b54824a0$var$getFirstThreeElements","results","array","slice","ids","$ef95d285b54824a0$var$_getGenresById","genres","arrGenres","getGenre","genre1","find","genre","$ef95d285b54824a0$var$_getUpcomingFilm","ref","formattedStartDate","formattedEndDate","$ef95d285b54824a0$var$getCurrentEndLastDayOfMonth","getUpcoming","$ef95d285b54824a0$var$getRandomValue","backdropPath","posterPath","length","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","Math","floor","random"],"version":3,"file":"index.24fbd24b.js.map"}