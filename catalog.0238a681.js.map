{"mappings":"4iBAAA,IAAAA,EAAAC,EAAA,S,uCCAMC,EAAO,CACXC,WAAYC,SAASC,eAAe,cAEpCC,aAAcF,SAASG,cAAc,mBCD1BC,EAAc,SAAAC,GACzB,IA4BeC,EA5BTC,EAASF,EACZG,KAAI,SAAAC,GACH,MAAO,gBACwCC,OADxBD,EAAKE,GAAG,gFACqCD,OAArBD,EAAKG,OAAO,YAIhDF,OAJyDD,EAAKI,MAAM,kIAOjEH,OAHHD,EAAKI,MAAM,wFAIqBH,OAD7BD,EAAKK,OAAO,4DAMHJ,OALoBD,EAAKM,KAAK,+GAKlBL,OAAZD,EAAKO,OAAO,+G,IAMpCC,KAAK,IAMOX,EALPC,EAMRT,EAAKI,aAAagB,UAAYZ,EAL9Ba,QAAQC,IAAIb,E,EFtBd,I,EACMc,EAAarB,SAASG,cAAc,gBASpCmB,G,EAAmBC,EAAA3B,EAAA,CAAA2B,EAAAC,GAAAC,MAAA,SAAAC,EAAMC,G,IACrBC,E,mFAAkB,EAAAC,EAAAC,YAAWH,EAAY,G,OAA3CC,EAASG,EAAAC,KAAPJ,QACRK,EAAgBL,GAASM,MAAK,SAAAC,G,OAAOhB,QAAQC,IAAIe,E,wDAFpBR,G,iCAKzBM,EAAe,W,MAAGV,EAAA3B,EAAA,CAAA2B,EAAAC,GAAAC,MAAA,SAAAC,EAAMU,G,IAEtBC,EACAC,E,yEAFNnB,QAAQC,IAAIgB,G,SACQG,I,OAAdF,EAAKN,EAAAC,KACLM,EAAeF,EAAW5B,KAC9B,SAAAgC,G,IAAG7B,EAAE6B,EAAF7B,GAAIE,EAAK2B,EAAL3B,MAAO4B,EAAWD,EAAXC,YAAaC,EAAYF,EAAZE,aAAcC,EAASH,EAATG,UAAWC,EAAYJ,EAAZI,aAClD,MAAO,CACLjC,GAAIA,EACJE,MAAOA,EACPD,OAAQ6B,EACRzB,OAAQ0B,EACR5B,OAAQ+B,EAAeR,EAAOM,GAC9B5B,KAAM+B,EAAgBF,G,IAI5BxC,EAAYkC,G,2DAfgBF,G,gCAAT,GAkBfG,EAAU,W,MAAGhB,EAAA3B,EAAA,CAAA2B,EAAAC,GAAAC,MAAA,SAAAC,I,IACTqB,EAGAjC,E,kFAHekC,EAAAC,QAAMC,IAC3B,yDAAiExC,OAnCrD,qC,cAkCRqC,EAAMhB,EAAAC,KAAJe,KAGFjC,EAAaiC,EAAXjC,O,kBACDA,G,6FALO,GAQV+B,EAAiB,SAACR,EAAOM,GAC7B,IAAM7B,EAAS,GAMf,OALAuB,EAAM7B,KAAI,SAAAgC,G,IAAG7B,EAAE6B,EAAF7B,GAAIwC,EAAIX,EAAJW,MACe,IAA1BR,EAAUS,QAAQzC,IACpBG,EAAOuC,KAAKF,E,IAGTrC,EAAOG,KAAK,I,EAGf6B,EAAkB,SAAAQ,GAGtB,OAFa,IAAIC,KAAKD,GACJE,a,EAIpBnC,EAAWoC,iBAAiB,UAtDN,SAAAC,GACpBA,EAAEC,iBACF,IAAMC,EAAW,IAAIC,SAASH,EAAEI,QAC1BC,EAAmBC,OAAOC,YAAYL,EAASM,WAA7CH,aACRzC,EAAiByC,E","sources":["src/partials/js/catalog/example.js","src/partials/js/refs.js","src/partials/js/catalog/createCards.js"],"sourcesContent":["import axios from 'axios';\nimport { getByQuery, getMovie } from '../api';\nimport { refs } from '../refs';\nimport { createCards } from './createCards';\n\nconst API_KEY = '88b8a7c5d221d3120fb29d734050dc7d';\nconst searchForm = document.querySelector('.search-form');\n\nconst submitHandler = e => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const { searchMovies } = Object.fromEntries(formData.entries());\n  getMoviesByQuery(searchMovies);\n};\n\nconst getMoviesByQuery = async searchTerm => {\n  const { results } = await getByQuery(searchTerm, 1);\n  createDataCards(results).then(res => console.log(res));\n};\n\nconst createDataCards = async moviesData => {\n  console.log(moviesData);\n  const genre = await fetchGenre();\n  const newCardsDate = moviesData.map(\n    ({ id, title, poster_path, vote_average, genre_ids, release_date }) => {\n      return {\n        id: id,\n        title: title,\n        poster: poster_path,\n        rating: vote_average,\n        genres: createGenreStr(genre, genre_ids),\n        date: createMovieDate(release_date),\n      };\n    }\n  );\n  createCards(newCardsDate);\n};\n\nconst fetchGenre = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const { genres } = data;\n  return genres;\n};\n\nconst createGenreStr = (genre, genre_ids) => {\n  const genres = [];\n  genre.map(({ id, name }) => {\n    if (genre_ids.indexOf(id) !== -1) {\n      genres.push(name);\n    }\n  });\n  return genres.join(',');\n};\n\nconst createMovieDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  return year;\n};\n\nsearchForm.addEventListener('submit', submitHandler);\n\nexport { createDataCards };\n","const refs = {\n  pagination: document.getElementById('pagination'),\n  //_______Catalog_______\n  catalogFilms: document.querySelector('.catalog-films'),\n  //____________________\n};\n\nexport { refs };\n","import { refs } from '../refs';\n\nexport const createCards = dataCard => {\n  const markup = dataCard\n    .map(card => {\n      return `<div data-id=${card.id} class=\"catalog-card\">\n      <img src='https://image.tmdb.org/t/p/original${card.poster}' alt=\"${card.title}\" loading=\"lazy\" />\n      <div class=\"catalog-info\">\n        <div>\n          <p class=\"catalog-info-name\">\n            <b>${card.title}</b>\n          </p>\n          <p class=\"catalog-info-details\">\n            <span>${card.genres}</span>\n            <span class=\"catalog-info-border\" >${card.date}</span>\n          </p>\n        </div>\n        <div\n          class=\"Stars\"\n          style=\"--rating: ${card.rating}\"\n          aria-label=\"Rating of this product is 2.3 out of 5.\"\n        ></div>\n      </div>\n    </div>`;\n    })\n    .join('');\n  addHTML(markup);\n  console.log(markup);\n  //   dataCard.map(el => console.log(el));\n};\n\nfunction addHTML(cards) {\n  refs.catalogFilms.innerHTML = cards;\n}\n"],"names":["$bpxeT","parcelRequire","$5f0c02a003d98366$export$21666b427502ea6d","pagination","document","getElementById","catalogFilms","querySelector","$66edc2a1388134fa$export$659b6b545718ce73","dataCard","cards","markup","map","card","concat","id","poster","title","genres","date","rating","join","innerHTML","console","log","$bfa640fc158a0d39$var$searchForm","$bfa640fc158a0d39$var$getMoviesByQuery","$parcel$interopDefault","$2TvXO","mark","_callee","searchTerm","results","$jyO6b","getByQuery","_ctx","sent","$bfa640fc158a0d39$export$f3fd225445632348","then","res","moviesData","genre","newCardsDate","$bfa640fc158a0d39$var$fetchGenre","param","poster_path","vote_average","genre_ids","release_date","$bfa640fc158a0d39$var$createGenreStr","$bfa640fc158a0d39$var$createMovieDate","data","$dIxxU","default","get","name","indexOf","push","dateString","Date","getFullYear","addEventListener","e","preventDefault","formData","FormData","target","searchMovies","Object","fromEntries","entries"],"version":3,"file":"catalog.0238a681.js.map"}