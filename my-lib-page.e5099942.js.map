{"mappings":"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","sources":["src/partials/js/my-lib/lib-storage.js","src/partials/js/my-lib/lib-refs.js","src/partials/js/modal.js","src/partials/js/home/example-home.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport { libRefs } from './lib-refs';\n\nconst localMoviesArr = JSON.parse(localStorage.getItem('films')) || [];\n\nconst clearLibrary = () => {\n  localStorage.removeItem('films');\n};\n\nconst addFilmToStorage = film => {\n  const filmId = film.id;\n  const isFilmExists = localMoviesArr.some(({ id }) => id === filmId);\n\n  if (!isFilmExists) {\n    localMoviesArr.unshift(film);\n    localStorage.setItem('films', JSON.stringify(localMoviesArr));\n    Notify.success('Film was added to library successfully');\n    return;\n  }\n  alert('!!!');\n  // removeItemFromLocalStorage(film.id);\n};\n\nconst removeItemFromLocalStorage = id => {\n  const items = JSON.parse(localStorage.getItem('films')) || [];\n\n  const index = items.findIndex(item => item.id === id);\n\n  if (index !== -1) {\n    items.splice(index, 1);\n    localStorage.setItem('films', JSON.stringify(items));\n  }\n};\n\nconst getParsedFilms = () => {\n  try {\n    const filmsArr = localStorage.getItem('films');\n    return JSON.parse(filmsArr) || [];\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst parsedFilms = getParsedFilms();\n\nconst parsedFilmsGenreIds = [\n  ...new Set(parsedFilms.flatMap(({ genres }) => genres.map(({ id }) => id))),\n];\n\nexport { parsedFilms, parsedFilmsGenreIds, addFilmToStorage, clearLibrary };\n","const libRefs = {\n  libSelectEl: document.getElementById('js-genre-select'),\n  libMoviesListEl: document.getElementById('js-lib-list'),\n  libLoadMoreBtn: document.getElementById('js-loadMore-btn'),\n  libClearBtn: document.getElementById('clear-lib-btn'),\n};\n\nexport { libRefs };\n","import { swiper } from '../../partials/js/hero/hero';\nimport { getInfoByMovie } from './api';\nimport { getGenre } from './api';\nimport { addFilmToStorage } from './my-lib/lib-storage';\nimport { onWatchTrailer } from './hero/trailer-modal';\nimport { getGenresById } from './home/example-home';\n\nconst refs = {\n  openModal: document.querySelector('[data-modal-open]'),\n  closeModal: document.querySelector('[data-modal-close]'),\n  backdrop: document.querySelector('[data-modal]'),\n  upcomingWrapLi: document.querySelector('.modal-info'),\n  addToLibBtn: null,\n};\n\ndocument.addEventListener('click', onOpenModal);\nrefs.closeModal.addEventListener('click', onCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\nfunction onOpenModal(event) {\n  const cardEl = event.target.closest('.is-id');\n  if (cardEl === null) return;\n\n  const cardId = cardEl.dataset.id;\n  getMovieById(cardId);\n\n  swiper.autoplay.stop();\n  document.body.classList.add('not-scroll-body');\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.remove('is-hidden');\n}\n\nfunction onCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  swiper.autoplay.start();\n  document.body.classList.remove('not-scroll-body');\n  refs.backdrop.classList.add('is-hidden');\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onCloseModal();\n  }\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') onCloseModal();\n}\n\nasync function getMovieById(id) {\n  const data = await getInfoByMovie(id);\n  renderFilmInModal(data);\n}\n\nasync function renderFilmInModal(film) {\n  console.log(film);\n  const {\n    poster_path,\n    backdrop_path,\n    genres,\n    overview,\n    popularity,\n    title,\n    vote_average,\n    vote_count,\n    id,\n  } = film;\n\n  const genresListIds = genres.map(genre => genre.id);\n  const formatedGenres = await getGenresById(genresListIds);\n\n  let imagePath = '';\n  if (poster_path !== null) {\n    imagePath = `https://image.tmdb.org/t/p/original/${poster_path}`;\n  } else if (backdrop_path !== null) {\n    imagePath = `https://image.tmdb.org/t/p/original/${backdrop_path}`;\n  } else {\n    imagePath =\n      'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n\n  const markup = `\n    <div class=\"modal-card\">\n      <img\n        class=\"modal-img\"\n        src=\"${imagePath}\"\n        alt=\" \"\n      />\n\n      <div class=\"modal-card-wrap\">\n        <h3 class=\"modal-card-title\">${title}</h3>\n\n          <div class=\"modal-card-vote-wrap\">\n            <div class=\"modal-card-vote color-description\"><span>Vote / Votes</span></div>\n            <div class=\"modal-card-vote-data\">\n              <span>${vote_average.toFixed(\n                1\n              )}</span> / <span>${vote_count}</span>\n            </div>\n          </div>\n        \n          <div class=\"modal-card-popularity-wrap\">\n            <span class=\"modal-card-popularity-text color-description\">Popularity</span>\n            <span class=\"modal-card-popularity-data\"\n              >${popularity.toFixed(1)}</span\n            >\n          </div>\n\n          <div class=\"modal-card-genre-wrap\">\n            <span class=\"modal-card-genre-text color-description\">Genre</span>\n            <span class=\"modal-card-genre-data\">${formatedGenres}</span>\n          </div>\n        \n        <span class=\"modal-card-about-title color-description\">About</span>\n\n        <p class=\"modal-card-about-text\">${overview}</p>\n\n        <button class=\"modal-button gap-right\" type=\"button\"><span>Add to my library</span></button>\n         <button type=\"button\" class=\" modal-button hero-btn-trailer\" id=\"hero-btn-trailer\" data-id=\"${id}\">\n    Watch trailer\n  </button>\n      </div>\n    </div>`;\n\n  refs.upcomingWrapLi.innerHTML = markup;\n\n  refs.addToLibBtn = document.querySelector('.modal-button');\n\n  const addToLib = evt => {\n    addFilmToStorage(film);\n    evt.currentTarget.textContent = '!!';\n  };\n  refs.addToLibBtn.addEventListener('click', addToLib);\n}\n\nexport { refs };\n","import * as hero from '../../js/modal';\nimport { getWeeklyTrending } from '../api';\nimport { getUpcoming } from '../api';\nimport { getGenre } from '../api';\n\nconst listOfFilms = document.querySelector('.weekly-cards-wrap');\nconst upcomingWrapEl = document.querySelector('.upcoming_wrap');\nconst seeAll = document.querySelector('.weekly-title-link');\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  console.log(firstThreeFilms);\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n  <div class=\"weekly-card-description\">\n    <h3 class=\"weekly-card-description-title\">${title || name}</h3>\n    <div class='weekly-card-description-wrap'>\n       <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n\n     <div class=\"Stars\" style=\"--rating: ${parseFloat(\n       (vote_average / 2).toFixed(1)\n     )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div>\n      </div>\n  </div>\n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.insertAdjacentHTML(\n      'beforeend',\n      '<p class=\"upcoming-not-found\">OOPS...We are very sorry! We don’t have any results</p>'\n    );\n  }\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n}\n\n// Функція для визначення шляху зображення на основі ширини екрану\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else {\n    return 'https://d2ths1nqi4sbhh.cloudfront.net/images/no-image.png?v=3884857787';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\n// =========== function getRandomValue =============\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n\nexport { getGenresById, filterGenres };\n"],"names":["$7Y9D8","parcelRequire","$8fbd6111e242142d$var$localMoviesArr","JSON","parse","localStorage","getItem","$8fbd6111e242142d$export$72aeb3fdc096d21d","removeItem","$8fbd6111e242142d$export$d326f28fa561aa06","film","filmId","id","some","unshift","setItem","stringify","Notify","success","alert","$8fbd6111e242142d$export$c118d883ed694a49","filmsArr","error","console","$8fbd6111e242142d$var$getParsedFilms","$8fbd6111e242142d$export$c149f286d6cc84b6","Set","flatMap","genres","map","$16fc69f3f69317b5$export$a53e322463ec8607","libSelectEl","document","getElementById","libMoviesListEl","libLoadMoreBtn","libClearBtn","$g7hbw","$51a648048b126082$export$21666b427502ea6d","openModal","querySelector","closeModal","backdrop","upcomingWrapLi","addToLibBtn","$51a648048b126082$var$onCloseModal","window","removeEventListener","$51a648048b126082$var$onEscKeyPress","swiper","autoplay","start","body","classList","remove","add","event","code","addEventListener","cardEl","target","closest","async","log","poster_path","backdrop_path","overview","popularity","title","vote_average","vote_count","genresListIds","genre","formatedGenres","$a51SH","getGenresById","imagePath","markup","toFixed","innerHTML","addToLib","evt","$cl7Eh","addFilmToStorage","currentTarget","textContent","$51a648048b126082$var$renderFilmInModal","$19F3f","getInfoByMovie","$51a648048b126082$var$getMovieById","dataset","stop","$756bd49929fd9e28$var$listOfFilms","$756bd49929fd9e28$var$upcomingWrapEl","$756bd49929fd9e28$export$f32c0af4ea6694a5","ids","getGenre","genre1","find","name","join","$756bd49929fd9e28$export$d1804f076a27e43a","genre_ids","length","slice","location","href","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","upcomingFilm","release_date","listGenres","isMobile","innerWidth","backdropPath","posterPath","$756bd49929fd9e28$var$getImagePath","insertAdjacentHTML","$756bd49929fd9e28$var$renderUpcomingFilm","array","randomIndex","Math","floor","random","$756bd49929fd9e28$var$getRandomValue","results","firstThreeFilms","Promise","all","first_air_date","substring","parseFloat","$756bd49929fd9e28$var$renderWeeklyThreeTrends","getWeeklyTrending"],"version":3,"file":"my-lib-page.e5099942.js.map"}