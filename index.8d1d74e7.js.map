{"mappings":"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","sources":["src/partials/js/home/example-home.js"],"sourcesContent":["import * as hero from '../../js/modal';\nimport { getWeeklyTrending } from '../api';\nimport { getUpcoming } from '../api';\nimport { getGenre } from '../api';\n\nconst listOfFilms = document.querySelector('.weekly-cards-wrap');\nconst upcomingWrapEl = document.querySelector('.upcoming_wrap');\nconst seeAll = document.querySelector('.weekly-title-link');\n\n// ================See all=================\n\nseeAll.addEventListener('click', () => {\n  location.href = 'catalog.html';\n});\n\n// ================ Weekly trends section ==============\n\nasync function getWeeklyTrends() {\n  const data = await getWeeklyTrending();\n\n  const firstThreeFilms = getFirstThreeElements(data.results);\n  renderWeeklyThreeTrends(firstThreeFilms);\n}\n\nfunction getFirstThreeElements(array) {\n  return array.slice(0, 3);\n}\n\nasync function renderWeeklyThreeTrends(firstThreeFilms) {\n  console.log(firstThreeFilms);\n  const markup = await Promise.all(\n    firstThreeFilms.map(\n      async ({\n        backdrop_path,\n        title,\n        release_date,\n        genre_ids,\n        id,\n        poster_path,\n        name,\n        first_air_date,\n        vote_average,\n      }) => {\n        genre_ids = filterGenres(genre_ids);\n        const listGenres = await getGenresById(genre_ids);\n\n        return `<li class=\"weekly-card is-id\" data-id=${id}>\n        <div class=\"weekly-container-image\">\n          <img\n            class=\"weekly-card-image\"\n           src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n            alt=\"\"\n          />\n         <div class=\"overlay\"></div>       \n        </div>\n        <div class=\"weekly-card-description\">\n          <div>\n            <title class=\"weekly-card-description-title\">${\n              title || name\n            }</title>\n            <p class=\"weekly-card-description-other\">${listGenres} | ${\n          release_date\n            ? release_date.substring(0, 4)\n            : first_air_date.substring(0, 4)\n        }</p>\n          </div>\n         <div class=\"Stars\" style=\"--rating: ${parseFloat(\n           (vote_average / 2).toFixed(1)\n         )};\" aria-label=\"Rating of this product is 2.3 out of 5.\"></div> \n        </div>\n        \n      </li>`;\n      }\n    )\n  );\n\n  listOfFilms.innerHTML = markup.join('');\n}\n\nasync function getGenresById(ids) {\n  const data = await getGenre();\n  const genres = data.genres;\n\n  const arrGenres = ids.map(id => {\n    const genre = genres.find(genre => genre.id === id);\n    return genre ? genre.name : '';\n  });\n  return arrGenres.join(', ');\n}\n\n// ================ Upcoming this month section ==============\n\nasync function getUpcomingFilm() {\n  const { formattedStartDate, formattedEndDate } =\n    getCurrentEndLastDayOfMonth();\n  try {\n    const data = await getUpcoming(formattedStartDate, formattedEndDate);\n    const randomValue = getRandomValue(data.results);\n    renderUpcomingFilm(randomValue);\n  } catch (error) {\n    upcomingWrapEl.innerHTML =\n      '<p class=\"upcoming-not-found\">OOPS...We are very sorry! We don’t have any results matching your search.</p>';\n  }\n}\n\nasync function renderUpcomingFilm(upcomingFilm) {\n  let {\n    backdrop_path,\n    poster_path,\n    genre_ids,\n    popularity,\n    release_date,\n    title,\n    vote_average,\n    vote_count,\n    overview,\n  } = upcomingFilm;\n\n  genre_ids = filterGenres(genre_ids);\n\n  const listGenres = await getGenresById(genre_ids);\n\n  const isMobile = window.innerWidth < 767;\n  let imagePath = getImagePath(backdrop_path, poster_path, isMobile);\n\n  const markup = `<div class=\"upcoming-card\">\n\n            <img class=\"upcoming-card-img\" src=\"${imagePath}\" alt=\" \" />\n\n          <div class=\"upcoming-card-wrap\">\n            <h3 class=\"upcoming-card-title\">${title}</h3>\n\n            <div class=\"upcoming-card-numbers-wrap-top\">\n              <div class=\"upcoming-card-release-wrap\">\n                <span class=\"upcoming-card-release-text\">Release date</span>\n                <span class=\"upcoming-card-release-data\">${release_date}</span>\n              </div>\n\n              <div class=\"upcoming-card-vote-wrap\">\n                <div class=\"upcoming-card-vote\"><span>Vote / Votes</span></div>\n                <div class=\"upcoming-card-vote-data\">\n                  <span>${vote_average}</span> / <span>${vote_count}</span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"upcoming-card-numbers-wrap-down\">\n              <div class=\"upcoming-card-popularity-wrap\">\n                <span class=\"upcoming-card-popularity-text\">Popularity</span>\n                <span class=\"upcoming-card-popularity-data\">${popularity.toFixed(\n                  1\n                )}</span>\n              </div>\n\n              <div class=\"upcoming-card-genre-wrap\">\n                <span class=\"upcoming-card-genre-text\">Genre</span>\n                <span class=\"upcoming-card-genre-data\">${listGenres}</span>\n              </div>\n            </div>\n \n\n            <span class=\"upcoming-card-about-title\">About</span>\n\n            <p class=\"upcoming-card-about-text\">${overview}</p>\n\n            <button class=\"upcoming-button\" type=\"button\">\n              Add to my library\n            </button>\n          </div>\n        </div>`;\n  upcomingWrapEl.insertAdjacentHTML('beforeend', markup);\n}\n\n// Функція для визначення шляху зображення на основі ширини екрану\n\nfunction getImagePath(backdropPath, posterPath, isMobile) {\n  if (isMobile === true && posterPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else if (\n    isMobile === true &&\n    posterPath === null &&\n    backdropPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (isMobile === false && backdropPath !== null) {\n    return `https://image.tmdb.org/t/p/original/${backdropPath}`;\n  } else if (\n    isMobile === false &&\n    backdropPath === null &&\n    posterPath !== null\n  ) {\n    return `https://image.tmdb.org/t/p/original/${posterPath}`;\n  } else {\n    return 'https://pbs.twimg.com/media/C5OTOt3UEAAExIk.jpg';\n  }\n}\n\nfunction filterGenres(genre_ids) {\n  if (genre_ids.length > 2) {\n    return genre_ids.slice(0, 2);\n  }\n\n  return genre_ids;\n}\n\nfunction getCurrentEndLastDayOfMonth() {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');\n  const currentDay = String(currentDate.getDate()).padStart(2, '0');\n\n  const formattedStartDate = `${currentYear}-${currentMonth}-${currentDay}`;\n\n  const nextMonthFirstDay = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(nextMonthFirstDay - 1).getDate();\n  const lastDayOfMonthFormatted = String(lastDayOfMonth).padStart(2, '0');\n\n  const formattedEndDate = `${currentYear}-${currentMonth}-${lastDayOfMonthFormatted}`;\n\n  return { formattedStartDate, formattedEndDate };\n}\n\n// =========== function getRandomValue =============\n\nfunction getRandomValue(array) {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n}\n\nwindow.addEventListener('DOMContentLoaded', getUpcomingFilm);\nwindow.addEventListener('DOMContentLoaded', getWeeklyTrends);\n"],"names":["parcelRequire","$756bd49929fd9e28$var$listOfFilms","document","querySelector","$756bd49929fd9e28$var$upcomingWrapEl","async","$756bd49929fd9e28$var$getGenresById","ids","genres","$19F3f","getGenre","map","id","genre1","find","genre","name","join","$756bd49929fd9e28$var$filterGenres","genre_ids","length","slice","addEventListener","location","href","window","formattedStartDate","formattedEndDate","currentDate","Date","currentYear","getFullYear","currentMonth","String","getMonth","padStart","currentDay","getDate","nextMonthFirstDay","lastDayOfMonth","lastDayOfMonthFormatted","$756bd49929fd9e28$var$getCurrentEndLastDayOfMonth","data","getUpcoming","upcomingFilm","backdrop_path","poster_path","popularity","release_date","title","vote_average","vote_count","overview","listGenres","isMobile","innerWidth","markup","backdropPath","posterPath","$756bd49929fd9e28$var$getImagePath","toFixed","insertAdjacentHTML","$756bd49929fd9e28$var$renderUpcomingFilm","array","randomIndex","Math","floor","random","$756bd49929fd9e28$var$getRandomValue","results","error","innerHTML","firstThreeFilms","console","log","Promise","all","first_air_date","substring","parseFloat","$756bd49929fd9e28$var$renderWeeklyThreeTrends","getWeeklyTrending"],"version":3,"file":"index.8d1d74e7.js.map"}